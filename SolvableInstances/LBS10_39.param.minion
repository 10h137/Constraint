MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 89
# CSE_active_eliminated_expressions = 362
# CSE_active_total_size = 267
**VARIABLES**
DISCRETE M_00002_00002 #
{44..48}
**CONSTRAINTS**
w-inintervalset(M_00002_00002, [44,44,48,48])
**VARIABLES**
DISCRETE M_00002_00003 #
{40..44}
**CONSTRAINTS**
w-inintervalset(M_00002_00003, [40,40,44,44])
**VARIABLES**
DISCRETE M_00002_00004 #
{28..40}
**CONSTRAINTS**
w-inintervalset(M_00002_00004, [28,28,32,32,34,34,40,40])
**VARIABLES**
DISCRETE M_00002_00005 #
{28..34}
**CONSTRAINTS**
w-inintervalset(M_00002_00005, [28,28,32,32,34,34])
**VARIABLES**
DISCRETE M_00002_00006 #
{12..34}
**CONSTRAINTS**
w-inintervalset(M_00002_00006, [12,12,28,28,32,32,34,34])
**VARIABLES**
DISCRETE M_00002_00007 #
{8..12}
**CONSTRAINTS**
w-inintervalset(M_00002_00007, [8,9,12,12])
**VARIABLES**
DISCRETE M_00002_00008 #
{8..32}
**CONSTRAINTS**
w-inintervalset(M_00002_00008, [8,9,12,12,28,28,32,32])
**VARIABLES**
DISCRETE M_00002_00009 #
{9..32}
**CONSTRAINTS**
w-inintervalset(M_00002_00009, [9,9,12,12,28,28,32,32])
**VARIABLES**
DISCRETE M_00003_00001 #
{2..28}
**CONSTRAINTS**
w-inintervalset(M_00003_00001, [2,2,8,9,12,12,28,28])
**VARIABLES**
DISCRETE M_00003_00002 #
{40..48}
**CONSTRAINTS**
w-inintervalset(M_00003_00002, [40,40,44,44,48,48])
**VARIABLES**
DISCRETE M_00003_00003 #
{28..44}
**CONSTRAINTS**
w-inintervalset(M_00003_00003, [28,28,32,32,34,34,40,40,44,44])
**VARIABLES**
DISCRETE M_00003_00004 #
{28..40}
**CONSTRAINTS**
w-inintervalset(M_00003_00004, [28,28,32,32,34,34,40,40])
**VARIABLES**
DISCRETE M_00003_00005 #
{12..34}
**CONSTRAINTS**
w-inintervalset(M_00003_00005, [12,12,28,28,32,32,34,34])
**VARIABLES**
DISCRETE M_00003_00006 #
{8..34}
**CONSTRAINTS**
w-inintervalset(M_00003_00006, [8,9,12,12,28,28,32,32,34,34])
**VARIABLES**
DISCRETE M_00003_00007 #
{8..32}
**CONSTRAINTS**
w-inintervalset(M_00003_00007, [8,9,12,12,28,28,32,32])
**VARIABLES**
DISCRETE M_00003_00008 #
{8..32}
**CONSTRAINTS**
w-inintervalset(M_00003_00008, [8,9,12,12,28,28,32,32])
**VARIABLES**
DISCRETE M_00004_00001 #
{2..40}
**CONSTRAINTS**
w-inintervalset(M_00004_00001, [2,2,8,9,12,12,28,28,32,32,34,34,40,40])
**VARIABLES**
DISCRETE M_00004_00002 #
{28..48}
**CONSTRAINTS**
w-inintervalset(M_00004_00002, [28,28,32,32,34,34,40,40,44,44,48,48])
**VARIABLES**
DISCRETE M_00004_00003 #
{8..44}
**CONSTRAINTS**
w-inintervalset(M_00004_00003, [8,9,12,12,28,28,32,32,34,34,40,40,44,44])
**VARIABLES**
DISCRETE M_00004_00004 #
{8..40}
**CONSTRAINTS**
w-inintervalset(M_00004_00004, [8,9,12,12,28,28,32,32,34,34,40,40])
**VARIABLES**
DISCRETE M_00004_00005 #
{8..34}
**CONSTRAINTS**
w-inintervalset(M_00004_00005, [8,9,12,12,28,28,32,32,34,34])
**VARIABLES**
DISCRETE M_00004_00006 #
{8..34}
**CONSTRAINTS**
w-inintervalset(M_00004_00006, [8,9,12,12,28,28,32,32,34,34])
**VARIABLES**
DISCRETE M_00004_00007 #
{8..32}
**CONSTRAINTS**
w-inintervalset(M_00004_00007, [8,9,12,12,28,28,32,32])
**VARIABLES**
DISCRETE M_00005_00001 #
{2..48}
**CONSTRAINTS**
w-inintervalset(M_00005_00001, [2,2,8,9,12,12,28,28,32,32,34,34,40,40,44,44,48,48])
**VARIABLES**
DISCRETE M_00005_00002 #
{8..48}
**CONSTRAINTS**
w-inintervalset(M_00005_00002, [8,9,12,12,28,28,32,32,34,34,40,40,44,44,48,48])
**VARIABLES**
DISCRETE M_00005_00003 #
{8..44}
**CONSTRAINTS**
w-inintervalset(M_00005_00003, [8,9,12,12,28,28,32,32,34,34,40,40,44,44])
**VARIABLES**
DISCRETE M_00005_00004 #
{8..40}
**CONSTRAINTS**
w-inintervalset(M_00005_00004, [8,9,12,12,28,28,32,32,34,34,40,40])
**VARIABLES**
DISCRETE M_00005_00005 #
{8..34}
**CONSTRAINTS**
w-inintervalset(M_00005_00005, [8,9,12,12,28,28,32,32,34,34])
**VARIABLES**
DISCRETE M_00005_00006 #
{8..34}
**CONSTRAINTS**
w-inintervalset(M_00005_00006, [8,9,12,12,28,28,32,32,34,34])
**VARIABLES**
DISCRETE M_00006_00001 #
{2..48}
**CONSTRAINTS**
w-inintervalset(M_00006_00001, [2,2,8,9,12,12,28,28,32,32,34,34,40,40,44,44,48,48])
**VARIABLES**
DISCRETE M_00006_00002 #
{8..48}
**CONSTRAINTS**
w-inintervalset(M_00006_00002, [8,9,12,12,28,28,32,32,34,34,40,40,44,44,48,48])
**VARIABLES**
DISCRETE M_00006_00003 #
{8..44}
**CONSTRAINTS**
w-inintervalset(M_00006_00003, [8,9,12,12,28,28,32,32,34,34,40,40,44,44])
**VARIABLES**
DISCRETE M_00006_00004 #
{8..40}
**CONSTRAINTS**
w-inintervalset(M_00006_00004, [8,9,12,12,28,28,32,32,34,34,40,40])
**VARIABLES**
DISCRETE M_00006_00005 #
{8..34}
**CONSTRAINTS**
w-inintervalset(M_00006_00005, [8,9,12,12,28,28,32,32,34,34])
**VARIABLES**
DISCRETE M_00007_00001 #
{2..48}
**CONSTRAINTS**
w-inintervalset(M_00007_00001, [2,2,8,9,12,12,28,28,32,32,34,34,40,40,44,44,48,48])
**VARIABLES**
DISCRETE M_00007_00002 #
{8..48}
**CONSTRAINTS**
w-inintervalset(M_00007_00002, [8,9,12,12,28,28,32,32,34,34,40,40,44,44,48,48])
**VARIABLES**
DISCRETE M_00007_00003 #
{8..44}
**CONSTRAINTS**
w-inintervalset(M_00007_00003, [8,9,12,12,28,28,32,32,34,34,40,40,44,44])
**VARIABLES**
DISCRETE M_00007_00004 #
{8..40}
**CONSTRAINTS**
w-inintervalset(M_00007_00004, [8,9,12,12,28,28,32,32,34,34,40,40])
**VARIABLES**
DISCRETE M_00008_00001 #
{2..48}
**CONSTRAINTS**
w-inintervalset(M_00008_00001, [2,2,8,9,12,12,28,28,32,32,34,34,40,40,44,44,48,48])
**VARIABLES**
DISCRETE M_00008_00002 #
{8..48}
**CONSTRAINTS**
w-inintervalset(M_00008_00002, [8,9,12,12,28,28,32,32,34,34,40,40,44,44,48,48])
**VARIABLES**
DISCRETE M_00008_00003 #
{8..44}
**CONSTRAINTS**
w-inintervalset(M_00008_00003, [8,9,12,12,28,28,32,32,34,34,40,40,44,44])
**VARIABLES**
DISCRETE M_00009_00001 #
{2..48}
**CONSTRAINTS**
w-inintervalset(M_00009_00001, [2,2,8,9,12,12,28,28,32,32,34,34,40,40,44,44,48,48])
**VARIABLES**
DISCRETE M_00010_00001 #
{8..44}
**CONSTRAINTS**
w-inintervalset(M_00010_00001, [8,9,12,12,28,28,32,32,34,34,40,40,44,44])
**VARIABLES**
BOOL aux15 #Active-CSE: 4 occurrences of this expression or equivalent: (M_00007_00001=M_00006_00001)
DISCRETE aux16 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00008/13)
{0..2}
**CONSTRAINTS**
w-inintervalset(aux16, [0,0,2,2])
**VARIABLES**
DISCRETE aux17 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00006/13)
{0..2}
**CONSTRAINTS**
w-inintervalset(aux17, [0,0,2,2])
**VARIABLES**
BOOL aux19 #Active-CSE: 6 occurrences of this expression or equivalent: (M_00003_00004=M_00004_00004)
DISCRETE aux20 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00007_00002/13)
{0..3}
**CONSTRAINTS**
w-inintervalset(aux20, [0,0,2,3])
**VARIABLES**
DISCRETE aux21 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00007_00001/13)
{0..3}
**CONSTRAINTS**
w-inintervalset(aux21, [0,0,2,3])
**VARIABLES**
DISCRETE aux22 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00007_00003/13)
{0..3}
**CONSTRAINTS**
w-inintervalset(aux22, [0,0,2,3])
**VARIABLES**
DISCRETE aux23 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00007_00004/13)
{0..3}
**CONSTRAINTS**
w-inintervalset(aux23, [0,0,2,3])
**VARIABLES**
BOOL aux24 #Active-CSE: 7 occurrences of this expression or equivalent: (M_00002_00007=M_00003_00006)
BOOL aux25 #Active-CSE: 5 occurrences of this expression or equivalent: (M_00004_00005=M_00005_00004)
BOOL aux26 #Active-CSE: 7 occurrences of this expression or equivalent: (M_00004_00006=M_00005_00005)
DISCRETE aux27 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00003/13)
{0..3}
**CONSTRAINTS**
w-inintervalset(aux27, [0,0,2,3])
**VARIABLES**
DISCRETE aux28 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00002/13)
{2..3}
DISCRETE aux29 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00006/13)
{0..2}
**CONSTRAINTS**
w-inintervalset(aux29, [0,0,2,2])
**VARIABLES**
DISCRETE aux30 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00005/13)
{0..2}
**CONSTRAINTS**
w-inintervalset(aux30, [0,0,2,2])
**VARIABLES**
BOOL aux31 #Active-CSE: 11 occurrences of this expression or equivalent: (M_00003_00008=M_00004_00007)
DISCRETE aux33 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00009/13)
{0..2}
**CONSTRAINTS**
w-inintervalset(aux33, [0,0,2,2])
**VARIABLES**
DISCRETE aux34 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00004/13)
{2..3}
BOOL aux36 #Active-CSE: 10 occurrences of this expression or equivalent: (M_00002_00009=M_00003_00008)
BOOL aux37 #Active-CSE: 9 occurrences of this expression or equivalent: (M_00003_00007=M_00004_00006)
BOOL aux38 #Active-CSE: 5 occurrences of this expression or equivalent: (M_00003_00005=M_00004_00004)
BOOL aux39 #Active-CSE: 4 occurrences of this expression or equivalent: (M_00005_00003=M_00006_00003)
BOOL aux40 #Active-CSE: 8 occurrences of this expression or equivalent: (M_00002_00003=M_00003_00003)
BOOL aux41 #Active-CSE: 10 occurrences of this expression or equivalent: (M_00002_00002=M_00003_00002)
DISCRETE aux42 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00008/13)
{0..2}
**CONSTRAINTS**
w-inintervalset(aux42, [0,0,2,2])
**VARIABLES**
DISCRETE aux43 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00005_00006/13)
{0..2}
**CONSTRAINTS**
w-inintervalset(aux43, [0,0,2,2])
**VARIABLES**
DISCRETE aux44 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00005_00001/13)
{0..3}
**CONSTRAINTS**
w-inintervalset(aux44, [0,0,2,3])
**VARIABLES**
DISCRETE aux45 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00008_00002/13)
{0..3}
**CONSTRAINTS**
w-inintervalset(aux45, [0,0,2,3])
**VARIABLES**
DISCRETE aux46 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00006_00004/13)
{0..3}
**CONSTRAINTS**
w-inintervalset(aux46, [0,0,2,3])
**VARIABLES**
DISCRETE aux47 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00006_00002/13)
{0..3}
**CONSTRAINTS**
w-inintervalset(aux47, [0,0,2,3])
**VARIABLES**
BOOL aux48 #Active-CSE: 5 occurrences of this expression or equivalent: (M_00002_00005=M_00003_00005)
BOOL aux49 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00004=M_00005_00003)
BOOL aux50 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00005=M_00005_00005)
BOOL aux51 #Active-CSE: 5 occurrences of this expression or equivalent: (M_00002_00006=M_00003_00005)
BOOL aux52 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00004=M_00003_00003)
BOOL aux53 #Active-CSE: 4 occurrences of this expression or equivalent: (M_00002_00005=M_00003_00004)
BOOL aux54 #Active-CSE: 7 occurrences of this expression or equivalent: (M_00002_00004=M_00003_00004)
BOOL aux55 #Active-CSE: 9 occurrences of this expression or equivalent: (M_00004_00007=M_00005_00006)
BOOL aux56 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00007_00003=M_00008_00002)
BOOL aux57 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00007_00002=M_00008_00002)
BOOL aux58 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00007_00001=M_00008_00001)
BOOL aux59 #Active-CSE: 8 occurrences of this expression or equivalent: (M_00003_00003=M_00004_00003)
BOOL aux60 #Active-CSE: 7 occurrences of this expression or equivalent: (M_00003_00006=M_00004_00005)
BOOL aux61 #Active-CSE: 8 occurrences of this expression or equivalent: (M_00004_00001=M_00005_00001)
DISCRETE aux62 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00006_00001/13)
{0..3}
**CONSTRAINTS**
w-inintervalset(aux62, [0,0,2,3])
**VARIABLES**
DISCRETE aux63 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00006_00003/13)
{0..3}
**CONSTRAINTS**
w-inintervalset(aux63, [0,0,2,3])
**VARIABLES**
DISCRETE aux64 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00006_00005/13)
{0..2}
**CONSTRAINTS**
w-inintervalset(aux64, [0,0,2,2])
**VARIABLES**
DISCRETE aux65 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00006/13)
{0..2}
**CONSTRAINTS**
w-inintervalset(aux65, [0,0,2,2])
**VARIABLES**
DISCRETE aux66 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00007/13)
{0..2}
**CONSTRAINTS**
w-inintervalset(aux66, [0,0,2,2])
**VARIABLES**
DISCRETE aux67 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00003/13)
{2..3}
DISCRETE aux68 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00005/13)
{0..2}
**CONSTRAINTS**
w-inintervalset(aux68, [0,0,2,2])
**VARIABLES**
BOOL aux69 #Active-CSE: 6 occurrences of this expression or equivalent: (M_00005_00001=M_00006_00001)
BOOL aux70 #Active-CSE: 5 occurrences of this expression or equivalent: (M_00005_00005=M_00006_00004)
BOOL aux71 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00003=M_00004_00002)
BOOL aux72 #Active-CSE: 5 occurrences of this expression or equivalent: (M_00005_00002=M_00006_00002)
BOOL aux73 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00005_00003=M_00006_00002)
BOOL aux74 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00010_00001=M_00008_00003)
DISCRETE aux75 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00005_00002/13)
{0..3}
**CONSTRAINTS**
w-inintervalset(aux75, [0,0,2,3])
**VARIABLES**
DISCRETE aux76 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00005_00004/13)
{0..3}
**CONSTRAINTS**
w-inintervalset(aux76, [0,0,2,3])
**VARIABLES**
DISCRETE aux77 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00005_00005/13)
{0..2}
**CONSTRAINTS**
w-inintervalset(aux77, [0,0,2,2])
**VARIABLES**
DISCRETE aux78 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00005_00003/13)
{0..3}
**CONSTRAINTS**
w-inintervalset(aux78, [0,0,2,3])
**VARIABLES**
BOOL aux79 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00003=M_00005_00002)
BOOL aux80 #Active-CSE: 6 occurrences of this expression or equivalent: (M_00004_00003=M_00005_00003)
BOOL aux81 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00004=M_00004_00003)
BOOL aux82 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00006=M_00004_00006)
BOOL aux83 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00007_00004=M_00008_00003)
BOOL aux84 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00005_00004=M_00006_00004)
BOOL aux85 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00005_00004=M_00006_00003)
BOOL aux86 #Active-CSE: 4 occurrences of this expression or equivalent: (M_00003_00005=M_00004_00005)
DISCRETE aux87 #Active-CSE: 4 occurrences of this expression or equivalent: (M_00004_00004/13)
{0..3}
**CONSTRAINTS**
w-inintervalset(aux87, [0,0,2,3])
**VARIABLES**
BOOL aux88 #Active-CSE: 8 occurrences of this expression or equivalent: (M_00002_00008=M_00003_00007)
BOOL aux89 #Active-CSE: 9 occurrences of this expression or equivalent: (M_00003_00002=M_00004_00002)
BOOL aux90 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00007_00003=M_00006_00003)
BOOL aux91 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00007_00003=M_00006_00004)
BOOL aux92 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00007_00002=M_00006_00002)
BOOL aux93 #Active-CSE: 7 occurrences of this expression or equivalent: (M_00004_00002=M_00005_00002)
BOOL aux94 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00007_00002=M_00006_00003)
BOOL aux95 #Active-CSE: 7 occurrences of this expression or equivalent: (M_00005_00006=M_00006_00005)
DISCRETE aux96 #Active-CSE: 4 occurrences of this expression or equivalent: (M_00003_00004/13)
{2..3}
BOOL aux97 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00006=M_00003_00006)
BOOL aux98 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00007=M_00003_00007)
DISCRETE aux99 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00001/13)
{0..3}
**CONSTRAINTS**
w-inintervalset(aux99, [0,0,2,3])
**VARIABLES**
DISCRETE aux100 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00007/13)
{0..2}
**CONSTRAINTS**
w-inintervalset(aux100, [0,0,2,2])
**VARIABLES**
BOOL aux101 #Active-CSE: 4 occurrences of this expression or equivalent: (M_00004_00004=M_00005_00004)
BOOL aux102 #Active-CSE: 5 occurrences of this expression or equivalent: (M_00007_00004=M_00006_00005)
BOOL aux103 #Active-CSE: 10 occurrences of this expression or equivalent: (M_00003_00001=M_00004_00001)
DISCRETE aux104 #
{0..3}
**CONSTRAINTS**
w-inintervalset(aux104, [0,0,2,3])
**VARIABLES**
DISCRETE aux105 #( - M_00002_00003 + M_00002_00004)
{-12..-4}
**CONSTRAINTS**
w-inintervalset(aux105, [-12,-12,-10,-10,-8,-8,-6,-6,-4,-4])
**VARIABLES**
DISCRETE aux106 #( - M_00002_00003 + M_00002_00006)
{-32..-10}
**CONSTRAINTS**
w-inintervalset(aux106, [-32,-32,-28,-28,-16,-16,-12,-12,-10,-10])
**VARIABLES**
DISCRETE aux107 #( - M_00002_00006 + M_00002_00007)
{-26..-4}
**CONSTRAINTS**
w-inintervalset(aux107, [-26,-22,-20,-19,-16,-16,-4,-4])
**VARIABLES**
DISCRETE aux108 #( - M_00002_00007 + M_00002_00008)
{-4..24}
**CONSTRAINTS**
w-inintervalset(aux108, [-4,-3,-1,1,3,4,16,16,19,20,23,24])
**VARIABLES**
DISCRETE aux109 #( - M_00002_00006 + M_00002_00009)
{-25..-2}
**CONSTRAINTS**
w-inintervalset(aux109, [-25,-25,-23,-22,-20,-19,-16,-16,-6,-6,-4,-2])
**VARIABLES**
DISCRETE aux110 #( - M_00002_00008 + M_00002_00009)
{-23..24}
**CONSTRAINTS**
w-inintervalset(aux110, [-23,-23,-20,-19,-16,-16,-4,-3,0,1,3,4,16,16,19,20,23,24])
**VARIABLES**
DISCRETE aux111 #( - M_00002_00005 + M_00002_00006)
{-22..6}
**CONSTRAINTS**
w-inintervalset(aux111, [-22,-22,-20,-20,-16,-16,-6,-6,-4,-4,-2,-2,0,0,2,2,4,4,6,6])
**VARIABLES**
DISCRETE aux112 #( - M_00002_00005 + M_00002_00008)
{-20..4}
**CONSTRAINTS**
w-inintervalset(aux112, [-20,-19,-16,-16,-6,-6,-4,-4,-2,-2,0,0,4,4])
**VARIABLES**
DISCRETE aux113 #(M_00002_00004 + -2)
{26..38}
**CONSTRAINTS**
w-inintervalset(aux113, [26,26,30,30,32,32,38,38])
**VARIABLES**
DISCRETE aux114 #( - M_00002_00002 + M_00002_00003)
{-8..-4}
**CONSTRAINTS**
w-inintervalset(aux114, [-8,-8,-4,-4])
**VARIABLES**
DISCRETE aux115 #( - M_00002_00004 + M_00002_00005)
{-12..6}
**CONSTRAINTS**
w-inintervalset(aux115, [-12,-12,-8,-8,-6,-6,-4,-4,-2,-2,0,0,2,2,4,4,6,6])
**VARIABLES**
DISCRETE aux116 #( - M_00003_00002 + M_00003_00005)
{-36..-10}
**CONSTRAINTS**
w-inintervalset(aux116, [-36,-36,-32,-32,-28,-28,-20,-20,-16,-16,-14,-14,-12,-12,-10,-10])
**VARIABLES**
DISCRETE aux117 #( - M_00003_00001 + M_00003_00004)
{6..38}
**CONSTRAINTS**
w-inintervalset(aux117, [6,6,12,12,16,16,19,20,22,26,28,28,30,32,38,38])
**VARIABLES**
DISCRETE aux118 #( - M_00003_00005 + M_00003_00006)
{-26..6}
**CONSTRAINTS**
w-inintervalset(aux118, [-26,-22,-20,-19,-16,-16,-6,-6,-4,-2,0,0,2,2,4,4,6,6])
**VARIABLES**
DISCRETE aux119 #( - M_00003_00006 + M_00003_00007)
{-26..24}
**CONSTRAINTS**
w-inintervalset(aux119, [-26,-22,-20,-19,-16,-16,-6,-6,-4,1,3,4,16,16,19,20,23,24])
**VARIABLES**
DISCRETE aux120 #( - M_00003_00005 + M_00003_00008)
{-25..20}
**CONSTRAINTS**
w-inintervalset(aux120, [-25,-22,-20,-19,-16,-16,-6,-6,-4,-2,0,0,4,4,16,16,20,20])
**VARIABLES**
DISCRETE aux121 #( - M_00003_00007 + M_00003_00008)
{-23..24}
**CONSTRAINTS**
w-inintervalset(aux121, [-23,-23,-20,-19,-16,-16,-4,-3,-1,1,3,4,16,16,19,20,23,24])
**VARIABLES**
DISCRETE aux122 #( - M_00003_00004 + M_00003_00005)
{-28..6}
**CONSTRAINTS**
w-inintervalset(aux122, [-28,-28,-22,-22,-20,-20,-16,-16,-12,-12,-8,-8,-6,-6,-4,-4,-2,-2,0,0,2,2,4,4,6,6])
**VARIABLES**
DISCRETE aux123 #( - M_00003_00004 + M_00003_00007)
{-32..4}
**CONSTRAINTS**
w-inintervalset(aux123, [-32,-31,-28,-28,-26,-22,-20,-19,-16,-16,-12,-12,-8,-8,-6,-6,-4,-4,-2,-2,0,0,4,4])
**VARIABLES**
DISCRETE aux124 #( - M_00003_00001 + M_00003_00002)
{16..46}
**CONSTRAINTS**
w-inintervalset(aux124, [16,16,20,20,28,28,31,32,35,36,38,40,42,42,46,46])
**VARIABLES**
DISCRETE aux125 #( - M_00003_00003 + M_00003_00004)
{-16..6}
**CONSTRAINTS**
w-inintervalset(aux125, [-16,-16,-12,-12,-10,-10,-8,-8,-6,-6,-4,-4,-2,-2,0,0,2,2,4,4,6,6])
**VARIABLES**
DISCRETE aux126 #( - M_00003_00003 + M_00003_00006)
{-36..-6}
**CONSTRAINTS**
w-inintervalset(aux126, [-36,-35,-32,-31,-28,-28,-26,-22,-20,-19,-16,-16,-12,-12,-10,-10,-8,-8,-6,-6])
**VARIABLES**
DISCRETE aux127 #( - M_00003_00002 + M_00003_00003)
{-20..0}
**CONSTRAINTS**
w-inintervalset(aux127, [-20,-20,-16,-16,-14,-14,-12,-12,-10,-10,-8,-8,-6,-6,-4,-4,0,0])
**VARIABLES**
DISCRETE aux128 #( - M_00004_00005 + M_00004_00006)
{-26..24}
**CONSTRAINTS**
w-inintervalset(aux128, [-26,-22,-20,-19,-16,-16,-6,-6,-4,4,6,6,16,16,19,20,22,24])
**VARIABLES**
DISCRETE aux129 #( - M_00004_00006 + M_00004_00007)
{-26..24}
**CONSTRAINTS**
w-inintervalset(aux129, [-26,-22,-20,-19,-16,-16,-6,-6,-4,1,3,4,16,16,19,20,23,24])
**VARIABLES**
DISCRETE aux130 #( - M_00004_00004 + M_00004_00005)
{-32..26}
**CONSTRAINTS**
w-inintervalset(aux130, [-32,-31,-28,-28,-26,-22,-20,-19,-16,-16,-12,-12,-8,-8,-6,-6,-4,4,6,6,16,16,19,20,22,26])
**VARIABLES**
DISCRETE aux131 #( - M_00004_00004 + M_00004_00007)
{-32..24}
**CONSTRAINTS**
w-inintervalset(aux131, [-32,-31,-28,-28,-26,-22,-20,-19,-16,-16,-12,-12,-8,-8,-6,-6,-4,1,3,4,16,16,19,20,23,24])
**VARIABLES**
DISCRETE aux132 #( - M_00004_00003 + M_00004_00004)
{-36..26}
**CONSTRAINTS**
w-inintervalset(aux132, [-36,-35,-32,-31,-28,-28,-26,-22,-20,-19,-16,-16,-12,-12,-10,-10,-8,-8,-6,-6,-4,4,6,6,8,8,12,12,16,16,19,20,22,26])
**VARIABLES**
DISCRETE aux133 #( - M_00004_00003 + M_00004_00006)
{-36..24}
**CONSTRAINTS**
w-inintervalset(aux133, [-36,-35,-32,-31,-28,-28,-26,-22,-20,-19,-16,-16,-12,-12,-10,-10,-8,-8,-6,-6,-4,4,6,6,16,16,19,20,22,24])
**VARIABLES**
DISCRETE aux134 #( - M_00004_00002 + M_00004_00003)
{-40..12}
**CONSTRAINTS**
w-inintervalset(aux134, [-40,-39,-36,-35,-32,-31,-28,-28,-26,-22,-20,-19,-16,-16,-14,-14,-12,-12,-10,-10,-8,-8,-6,-6,-4,-4,-2,-2,0,0,2,2,4,4,6,6,8,8,10,10,12,12])
**VARIABLES**
DISCRETE aux135 #( - M_00004_00002 + M_00004_00005)
{-40..6}
**CONSTRAINTS**
w-inintervalset(aux135, [-40,-39,-36,-35,-32,-31,-28,-28,-26,-22,-20,-19,-16,-16,-14,-14,-12,-12,-10,-10,-8,-8,-6,-6,-4,-4,-2,-2,0,0,2,2,4,4,6,6])
**VARIABLES**
DISCRETE aux136 #( - M_00004_00001 + M_00004_00002)
{0..46}
**CONSTRAINTS**
w-inintervalset(aux136, [0,0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,19,20,22,26,28,28,30,32,35,36,38,40,42,42,46,46])
**VARIABLES**
DISCRETE aux137 #( - M_00004_00001 + M_00004_00004)
{-28..38}
**CONSTRAINTS**
w-inintervalset(aux137, [-28,-28,-26,-22,-20,-19,-16,-16,-12,-12,-8,-8,-6,-6,-4,4,6,8,10,10,12,12,16,16,19,20,22,26,28,28,30,32,38,38])
**VARIABLES**
DISCRETE aux138 #( - M_00005_00003 + M_00005_00004)
{-36..32}
**CONSTRAINTS**
w-inintervalset(aux138, [-36,-35,-32,-31,-28,-28,-26,-22,-20,-19,-16,-16,-12,-12,-10,-10,-8,-8,-6,-6,-4,4,6,6,8,8,12,12,16,16,19,20,22,26,28,28,31,32])
**VARIABLES**
DISCRETE aux139 #( - M_00005_00004 + M_00005_00005)
{-32..26}
**CONSTRAINTS**
w-inintervalset(aux139, [-32,-31,-28,-28,-26,-22,-20,-19,-16,-16,-12,-12,-8,-8,-6,-6,-4,4,6,6,16,16,19,20,22,26])
**VARIABLES**
DISCRETE aux140 #( - M_00005_00003 + M_00005_00006)
{-36..24}
**CONSTRAINTS**
w-inintervalset(aux140, [-36,-35,-32,-31,-28,-28,-26,-22,-20,-19,-16,-16,-12,-12,-10,-10,-8,-8,-6,-6,-4,4,6,6,16,16,19,20,22,24])
**VARIABLES**
DISCRETE aux141 #( - M_00005_00005 + M_00005_00006)
{-26..24}
**CONSTRAINTS**
w-inintervalset(aux141, [-26,-22,-20,-19,-16,-16,-6,-6,-4,4,6,6,16,16,19,20,22,24])
**VARIABLES**
DISCRETE aux142 #( - M_00005_00002 + M_00005_00003)
{-40..35}
**CONSTRAINTS**
w-inintervalset(aux142, [-40,-39,-36,-35,-32,-31,-28,-28,-26,-22,-20,-19,-16,-16,-14,-14,-12,-12,-10,-10,-8,-8,-6,-6,-4,4,6,6,8,8,10,10,12,12,16,16,19,20,22,26,28,28,31,32,35,35])
**VARIABLES**
DISCRETE aux143 #( - M_00005_00002 + M_00005_00005)
{-40..26}
**CONSTRAINTS**
w-inintervalset(aux143, [-40,-39,-36,-35,-32,-31,-28,-28,-26,-22,-20,-19,-16,-16,-14,-14,-12,-12,-10,-10,-8,-8,-6,-6,-4,4,6,6,16,16,19,20,22,26])
**VARIABLES**
DISCRETE aux144 #( - M_00005_00001 + M_00005_00002)
{-32..46}
**CONSTRAINTS**
w-inintervalset(aux144, [-32,-31,-28,-28,-26,-22,-20,-19,-16,-16,-14,-14,-12,-12,-10,-10,-8,-8,-6,-6,-4,4,6,8,10,10,12,12,14,14,16,16,19,20,22,26,28,28,30,32,35,36,38,40,42,42,46,46])
**VARIABLES**
DISCRETE aux145 #( - M_00005_00001 + M_00005_00004)
{-40..38}
**CONSTRAINTS**
w-inintervalset(aux145, [-40,-39,-36,-35,-32,-31,-28,-28,-26,-22,-20,-19,-16,-16,-14,-14,-12,-12,-10,-10,-8,-8,-6,-6,-4,4,6,8,10,10,12,12,16,16,19,20,22,26,28,28,30,32,38,38])
**VARIABLES**
DISCRETE aux146 #( - M_00006_00002 + M_00006_00003)
{-40..36}
**CONSTRAINTS**
w-inintervalset(aux146, [-40,-39,-36,-35,-32,-31,-28,-28,-26,-22,-20,-19,-16,-16,-14,-14,-12,-12,-10,-10,-8,-8,-6,-6,-4,4,6,6,8,8,10,10,12,12,16,16,19,20,22,26,28,28,31,32,35,36])
**VARIABLES**
DISCRETE aux147 #( - M_00006_00003 + M_00006_00004)
{-36..32}
**CONSTRAINTS**
w-inintervalset(aux147, [-36,-35,-32,-31,-28,-28,-26,-22,-20,-19,-16,-16,-12,-12,-10,-10,-8,-8,-6,-6,-4,4,6,6,8,8,12,12,16,16,19,20,22,26,28,28,31,32])
**VARIABLES**
DISCRETE aux148 #( - M_00006_00002 + M_00006_00005)
{-40..26}
**CONSTRAINTS**
w-inintervalset(aux148, [-40,-39,-36,-35,-32,-31,-28,-28,-26,-22,-20,-19,-16,-16,-14,-14,-12,-12,-10,-10,-8,-8,-6,-6,-4,4,6,6,16,16,19,20,22,26])
**VARIABLES**
DISCRETE aux149 #( - M_00006_00004 + M_00006_00005)
{-32..26}
**CONSTRAINTS**
w-inintervalset(aux149, [-32,-31,-28,-28,-26,-22,-20,-19,-16,-16,-12,-12,-8,-8,-6,-6,-4,4,6,6,16,16,19,20,22,26])
**VARIABLES**
DISCRETE aux150 #( - M_00006_00001 + M_00006_00002)
{-40..46}
**CONSTRAINTS**
w-inintervalset(aux150, [-40,-39,-36,-35,-32,-31,-28,-28,-26,-22,-20,-19,-16,-16,-14,-14,-12,-12,-10,-10,-8,-8,-6,-6,-4,4,6,8,10,10,12,12,14,14,16,16,19,20,22,26,28,28,30,32,35,36,38,40,42,42,46,46])
**VARIABLES**
DISCRETE aux151 #( - M_00006_00001 + M_00006_00004)
{-40..38}
**CONSTRAINTS**
w-inintervalset(aux151, [-40,-39,-36,-35,-32,-31,-28,-28,-26,-22,-20,-19,-16,-16,-14,-14,-12,-12,-10,-10,-8,-8,-6,-6,-4,4,6,8,10,10,12,12,16,16,19,20,22,26,28,28,30,32,38,38])
**VARIABLES**
DISCRETE aux152 #( - M_00007_00001 + M_00007_00002)
{-40..46}
**CONSTRAINTS**
w-inintervalset(aux152, [-40,-39,-36,-35,-32,-31,-28,-28,-26,-22,-20,-19,-16,-16,-14,-14,-12,-12,-10,-10,-8,-8,-6,-6,-4,4,6,8,10,10,12,12,14,14,16,16,19,20,22,26,28,28,30,32,35,36,38,40,42,42,46,46])
**VARIABLES**
DISCRETE aux153 #( - M_00007_00003 + M_00007_00004)
{-36..32}
**CONSTRAINTS**
w-inintervalset(aux153, [-36,-35,-32,-31,-28,-28,-26,-22,-20,-19,-16,-16,-12,-12,-10,-10,-8,-8,-6,-6,-4,4,6,6,8,8,12,12,16,16,19,20,22,26,28,28,31,32])
**VARIABLES**
DISCRETE aux154 #( - M_00007_00001 + M_00007_00004)
{-40..38}
**CONSTRAINTS**
w-inintervalset(aux154, [-40,-39,-36,-35,-32,-31,-28,-28,-26,-22,-20,-19,-16,-16,-14,-14,-12,-12,-10,-10,-8,-8,-6,-6,-4,4,6,8,10,10,12,12,16,16,19,20,22,26,28,28,30,32,38,38])
**VARIABLES**
DISCRETE aux155 #( - M_00007_00002 + M_00007_00003)
{-40..36}
**CONSTRAINTS**
w-inintervalset(aux155, [-40,-39,-36,-35,-32,-31,-28,-28,-26,-22,-20,-19,-16,-16,-14,-14,-12,-12,-10,-10,-8,-8,-6,-6,-4,4,6,6,8,8,10,10,12,12,16,16,19,20,22,26,28,28,31,32,35,36])
**VARIABLES**
DISCRETE aux156 #( - M_00008_00001 + M_00008_00002)
{-40..46}
**CONSTRAINTS**
w-inintervalset(aux156, [-40,-39,-36,-35,-32,-31,-28,-28,-26,-22,-20,-19,-16,-16,-14,-14,-12,-12,-10,-10,-8,-8,-6,-6,-4,4,6,8,10,10,12,12,14,14,16,16,19,20,22,26,28,28,30,32,35,36,38,40,42,42,46,46])
**VARIABLES**
DISCRETE aux157 #( - M_00008_00002 + M_00008_00003)
{-39..26}
**CONSTRAINTS**
w-inintervalset(aux157, [-39,-39,-36,-35,-32,-31,-28,-28,-26,-22,-20,-19,-16,-16,-14,-14,-12,-12,-10,-10,-8,-8,-6,-6,-4,4,6,6,8,8,10,10,12,12,16,16,19,20,22,26])
**VARIABLES**
DISCRETE aux158 #(M_00010_00001 - M_00009_00001)
{-40..42}
**CONSTRAINTS**
w-inintervalset(aux158, [-40,-39,-36,-35,-32,-31,-28,-28,-26,-22,-20,-19,-16,-16,-14,-14,-12,-12,-10,-10,-8,-8,-6,-6,-4,4,6,8,10,10,12,12,16,16,19,20,22,26,28,28,30,32,35,36,38,38,42,42])
**VARIABLES**
**VARIABLES**
ALIAS cards[10]=[2, 48, 44, 40, 28, 34, 12, 8, 32, 9]
**SEARCH**
PRINT[[M_00002_00002],[M_00002_00003],[M_00002_00004],[M_00002_00005],[M_00002_00006],[M_00002_00007],[M_00002_00008],[M_00002_00009],[M_00003_00001],[M_00003_00002],[M_00003_00003],[M_00003_00004],[M_00003_00005],[M_00003_00006],[M_00003_00007],[M_00003_00008],[M_00004_00001],[M_00004_00002],[M_00004_00003],[M_00004_00004],[M_00004_00005],[M_00004_00006],[M_00004_00007],[M_00005_00001],[M_00005_00002],[M_00005_00003],[M_00005_00004],[M_00005_00005],[M_00005_00006],[M_00006_00001],[M_00006_00002],[M_00006_00003],[M_00006_00004],[M_00006_00005],[M_00007_00001],[M_00007_00002],[M_00007_00003],[M_00007_00004],[M_00008_00001],[M_00008_00002],[M_00008_00003],[M_00009_00001],[M_00010_00001]]
VARORDER STATIC [M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, M_00002_00006, M_00002_00007, M_00002_00008, M_00002_00009, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005, M_00003_00006, M_00003_00007, M_00003_00008, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, M_00004_00006, M_00004_00007, M_00005_00001, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005, M_00005_00006, M_00006_00001, M_00006_00002, M_00006_00003, M_00006_00004, M_00006_00005, M_00007_00001, M_00007_00002, M_00007_00003, M_00007_00004, M_00008_00001, M_00008_00002, M_00008_00003, M_00009_00001, M_00010_00001]
**CONSTRAINTS**
div(M_00009_00001, 13, aux104)
reify(gaceq(M_00007_00001,M_00006_00001), aux15)
div(M_00002_00008, 13, aux16)
div(M_00002_00006, 13, aux17)
div(M_00002_00005, 13, 2)
reify(gaceq(M_00003_00004,M_00004_00004), aux19)
div(M_00007_00002, 13, aux20)
div(M_00007_00001, 13, aux21)
div(M_00007_00003, 13, aux22)
div(M_00007_00004, 13, aux23)
reify(gaceq(M_00002_00007,M_00003_00006), aux24)
reify(gaceq(M_00004_00005,M_00005_00004), aux25)
reify(gaceq(M_00004_00006,M_00005_00005), aux26)
div(M_00004_00003, 13, aux27)
div(M_00004_00002, 13, aux28)
div(M_00004_00006, 13, aux29)
div(M_00004_00005, 13, aux30)
reify(gaceq(M_00003_00008,M_00004_00007), aux31)
div(M_00002_00007, 13, 0)
div(M_00002_00009, 13, aux33)
div(M_00002_00004, 13, aux34)
div(M_00002_00003, 13, 3)
reify(gaceq(M_00002_00009,M_00003_00008), aux36)
reify(gaceq(M_00003_00007,M_00004_00006), aux37)
reify(gaceq(M_00003_00005,M_00004_00004), aux38)
reify(gaceq(M_00005_00003,M_00006_00003), aux39)
reify(gaceq(M_00002_00003,M_00003_00003), aux40)
reify(gaceq(M_00002_00002,M_00003_00002), aux41)
div(M_00003_00008, 13, aux42)
div(M_00005_00006, 13, aux43)
div(M_00005_00001, 13, aux44)
div(M_00008_00002, 13, aux45)
div(M_00006_00004, 13, aux46)
div(M_00006_00002, 13, aux47)
reify(gaceq(M_00002_00005,M_00003_00005), aux48)
reify(gaceq(M_00004_00004,M_00005_00003), aux49)
reify(gaceq(M_00004_00005,M_00005_00005), aux50)
reify(gaceq(M_00002_00006,M_00003_00005), aux51)
reify(gaceq(M_00002_00004,M_00003_00003), aux52)
reify(gaceq(M_00002_00005,M_00003_00004), aux53)
reify(gaceq(M_00002_00004,M_00003_00004), aux54)
reify(gaceq(M_00004_00007,M_00005_00006), aux55)
reify(gaceq(M_00007_00003,M_00008_00002), aux56)
reify(gaceq(M_00007_00002,M_00008_00002), aux57)
reify(gaceq(M_00007_00001,M_00008_00001), aux58)
reify(gaceq(M_00003_00003,M_00004_00003), aux59)
reify(gaceq(M_00003_00006,M_00004_00005), aux60)
reify(gaceq(M_00004_00001,M_00005_00001), aux61)
div(M_00006_00001, 13, aux62)
div(M_00006_00003, 13, aux63)
div(M_00006_00005, 13, aux64)
div(M_00003_00006, 13, aux65)
div(M_00003_00007, 13, aux66)
div(M_00003_00003, 13, aux67)
div(M_00003_00005, 13, aux68)
reify(gaceq(M_00005_00001,M_00006_00001), aux69)
reify(gaceq(M_00005_00005,M_00006_00004), aux70)
reify(gaceq(M_00003_00003,M_00004_00002), aux71)
reify(gaceq(M_00005_00002,M_00006_00002), aux72)
reify(gaceq(M_00005_00003,M_00006_00002), aux73)
reify(gaceq(M_00010_00001,M_00008_00003), aux74)
div(M_00005_00002, 13, aux75)
div(M_00005_00004, 13, aux76)
div(M_00005_00005, 13, aux77)
div(M_00005_00003, 13, aux78)
reify(gaceq(M_00004_00003,M_00005_00002), aux79)
reify(gaceq(M_00004_00003,M_00005_00003), aux80)
reify(gaceq(M_00003_00004,M_00004_00003), aux81)
reify(gaceq(M_00003_00006,M_00004_00006), aux82)
reify(gaceq(M_00007_00004,M_00008_00003), aux83)
reify(gaceq(M_00005_00004,M_00006_00004), aux84)
reify(gaceq(M_00005_00004,M_00006_00003), aux85)
reify(gaceq(M_00003_00005,M_00004_00005), aux86)
div(M_00004_00004, 13, aux87)
reify(gaceq(M_00002_00008,M_00003_00007), aux88)
reify(gaceq(M_00003_00002,M_00004_00002), aux89)
reify(gaceq(M_00007_00003,M_00006_00003), aux90)
reify(gaceq(M_00007_00003,M_00006_00004), aux91)
reify(gaceq(M_00007_00002,M_00006_00002), aux92)
reify(gaceq(M_00004_00002,M_00005_00002), aux93)
reify(gaceq(M_00007_00002,M_00006_00003), aux94)
reify(gaceq(M_00005_00006,M_00006_00005), aux95)
div(M_00003_00004, 13, aux96)
reify(gaceq(M_00002_00006,M_00003_00006), aux97)
reify(gaceq(M_00002_00007,M_00003_00007), aux98)
div(M_00004_00001, 13, aux99)
div(M_00004_00007, 13, aux100)
reify(gaceq(M_00004_00004,M_00005_00004), aux101)
reify(gaceq(M_00007_00004,M_00006_00005), aux102)
reify(gaceq(M_00003_00001,M_00004_00001), aux103)
gccweak([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, M_00002_00006, M_00002_00007, M_00002_00008, M_00002_00009],[-1],[0])
gccweak([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005, M_00003_00006, M_00003_00007, M_00003_00008],[-1],[0])
gccweak([M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, M_00004_00006, M_00004_00007],[-1],[0])
gccweak([M_00005_00001, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005, M_00005_00006],[-1],[0])
gccweak([M_00006_00001, M_00006_00002, M_00006_00003, M_00006_00004, M_00006_00005],[-1],[0])
gccweak([M_00007_00001, M_00007_00002, M_00007_00003, M_00007_00004],[-1],[0])
gccweak([M_00008_00001, M_00008_00002, M_00008_00003],[-1],[0])
gccweak([M_00010_00001, M_00009_00001],[-1],[0])
gccweak([M_00010_00001],[-1],[0])
watched-or({watched-and({w-literal(M_00002_00002,44),w-literal(M_00002_00003,40),w-literal(M_00002_00004,28),w-literal(M_00002_00005,34),w-literal(M_00002_00006,12),w-literal(M_00002_00007,8),w-literal(M_00002_00008,32),w-literal(M_00002_00009,9)}),watched-and({w-literal(M_00002_00002,48),w-literal(M_00002_00003,44),w-literal(M_00002_00004,40),w-literal(M_00002_00005,28),w-literal(M_00002_00006,32),w-literal(M_00002_00007,12),w-literal(M_00002_00008,8),w-literal(M_00002_00009,9)}),watched-and({w-literal(M_00002_00002,48),w-literal(M_00002_00003,44),w-literal(M_00002_00004,40),w-literal(M_00002_00005,28),w-literal(M_00002_00006,34),w-literal(M_00002_00007,8),w-literal(M_00002_00008,32),w-literal(M_00002_00009,9)}),watched-and({w-literal(M_00002_00002,48),w-literal(M_00002_00003,44),w-literal(M_00002_00004,40),w-literal(M_00002_00005,28),w-literal(M_00002_00006,34),w-literal(M_00002_00007,9),w-literal(M_00002_00008,8),w-literal(M_00002_00009,32)}),watched-and({w-literal(M_00002_00002,48),w-literal(M_00002_00003,44),w-literal(M_00002_00004,40),w-literal(M_00002_00005,34),w-literal(M_00002_00006,12),w-literal(M_00002_00007,8),w-literal(M_00002_00008,32),w-literal(M_00002_00009,9)}),watched-and({w-literal(M_00002_00002,48),w-literal(M_00002_00003,40),w-literal(M_00002_00004,28),w-literal(M_00002_00005,34),w-literal(M_00002_00006,12),w-literal(M_00002_00007,8),w-literal(M_00002_00008,32),w-literal(M_00002_00009,9)})})
watched-or({watched-and({w-literal(M_00003_00001,2),w-literal(aux41,1),w-literal(aux52,1),w-literal(aux53,1),w-literal(aux51,1),w-literal(aux24,1),w-literal(aux88,1),w-literal(aux36,1),watched-or({modulo(aux105,13,0),w-literal(aux34,3)})}),watched-and({w-literal(M_00003_00001,2),w-literal(aux41,1),w-literal(aux54,1),w-literal(aux48,1),gaceq(M_00002_00006,M_00003_00003),w-literal(aux24,1),w-literal(aux88,1),w-literal(aux36,1),modulo(aux106,13,0)}),watched-and({w-literal(M_00003_00001,2),w-literal(aux41,1),w-literal(aux40,1),w-literal(aux54,1),w-literal(aux48,1),w-literal(aux24,1),w-literal(aux88,1),w-literal(aux36,1),watched-or({modulo(aux107,13,0),w-literal(aux17,0)})}),watched-and({w-literal(M_00003_00001,2),w-literal(aux41,1),w-literal(aux40,1),w-literal(aux54,1),w-literal(aux48,1),w-literal(aux97,1),w-literal(aux88,1),w-literal(aux36,1),watched-or({modulo(aux108,13,0),w-literal(aux16,0)})}),watched-and({w-literal(M_00003_00001,2),w-literal(aux41,1),w-literal(aux40,1),w-literal(aux54,1),w-literal(aux48,1),w-literal(aux98,1),gaceq(M_00002_00008,M_00003_00008),gaceq(M_00002_00009,M_00003_00006),watched-or({modulo(aux109,13,0),gaceq(aux17,aux33)})}),watched-and({w-literal(M_00003_00001,2),w-literal(aux41,1),w-literal(aux40,1),w-literal(aux54,1),w-literal(aux48,1),w-literal(aux97,1),w-literal(aux98,1),w-literal(aux36,1),watched-or({modulo(aux110,13,0),gaceq(aux16,aux33)})}),watched-and({w-literal(M_00003_00001,2),w-literal(aux41,1),w-literal(aux40,1),w-literal(aux54,1),w-literal(aux51,1),w-literal(aux24,1),w-literal(aux88,1),w-literal(aux36,1),watched-or({modulo(aux111,13,0),w-literal(aux17,2)})}),watched-and({w-literal(M_00003_00001,2),w-literal(aux41,1),w-literal(aux40,1),w-literal(aux54,1),w-literal(aux97,1),w-literal(aux98,1),gaceq(M_00002_00008,M_00003_00005),w-literal(aux36,1),watched-or({modulo(aux112,13,0),w-literal(aux16,2)})}),watched-and({modulo(aux113,13,0),w-literal(aux41,1),w-literal(aux40,1),gaceq(M_00002_00004,M_00003_00001),w-literal(aux53,1),w-literal(aux51,1),w-literal(aux24,1),w-literal(aux88,1),w-literal(aux36,1)}),watched-and({w-literal(M_00003_00001,2),gaceq(M_00002_00003,M_00003_00002),w-literal(aux52,1),w-literal(aux53,1),w-literal(aux51,1),w-literal(aux24,1),w-literal(aux88,1),w-literal(aux36,1),watched-or({modulo(aux114,13,0),div(M_00002_00002, 13, 3)})}),watched-and({w-literal(M_00003_00001,2),w-literal(aux41,1),w-literal(aux40,1),w-literal(aux53,1),w-literal(aux51,1),w-literal(aux24,1),w-literal(aux88,1),w-literal(aux36,1),watched-or({modulo(aux115,13,0),w-literal(aux34,2)})})})
watched-or({watched-and({w-literal(aux103,1),w-literal(aux59,1),w-literal(aux19,1),gaceq(M_00003_00005,M_00004_00002),w-literal(aux60,1),w-literal(aux37,1),w-literal(aux31,1),modulo(aux116,13,0)}),watched-and({w-literal(aux89,1),w-literal(aux59,1),gaceq(M_00003_00004,M_00004_00001),w-literal(aux38,1),w-literal(aux60,1),w-literal(aux37,1),w-literal(aux31,1),watched-or({modulo(aux117,13,0),div(M_00003_00001, 13, aux96)})}),watched-and({w-literal(aux103,1),w-literal(aux89,1),w-literal(aux59,1),w-literal(aux19,1),w-literal(aux60,1),w-literal(aux37,1),w-literal(aux31,1),watched-or({modulo(aux118,13,0),gaceq(aux68,aux65)})}),watched-and({w-literal(aux103,1),w-literal(aux89,1),w-literal(aux59,1),w-literal(aux19,1),w-literal(aux86,1),w-literal(aux37,1),w-literal(aux31,1),watched-or({modulo(aux119,13,0),gaceq(aux65,aux66)})}),watched-and({w-literal(aux103,1),w-literal(aux89,1),w-literal(aux59,1),w-literal(aux19,1),w-literal(aux82,1),gaceq(M_00003_00007,M_00004_00007),gaceq(M_00003_00008,M_00004_00005),watched-or({modulo(aux120,13,0),gaceq(aux68,aux42)})}),watched-and({w-literal(aux103,1),w-literal(aux89,1),w-literal(aux59,1),w-literal(aux19,1),w-literal(aux86,1),w-literal(aux82,1),w-literal(aux31,1),watched-or({modulo(aux121,13,0),gaceq(aux66,aux42)})}),watched-and({w-literal(aux103,1),w-literal(aux89,1),w-literal(aux59,1),w-literal(aux38,1),w-literal(aux60,1),w-literal(aux37,1),w-literal(aux31,1),watched-or({modulo(aux122,13,0),gaceq(aux96,aux68)})}),watched-and({w-literal(aux103,1),w-literal(aux89,1),w-literal(aux59,1),w-literal(aux86,1),w-literal(aux82,1),gaceq(M_00003_00007,M_00004_00004),w-literal(aux31,1),watched-or({modulo(aux123,13,0),gaceq(aux96,aux66)})}),watched-and({gaceq(M_00003_00002,M_00004_00001),w-literal(aux71,1),w-literal(aux81,1),w-literal(aux38,1),w-literal(aux60,1),w-literal(aux37,1),w-literal(aux31,1),modulo(aux124,13,0)}),watched-and({w-literal(aux103,1),w-literal(aux89,1),w-literal(aux81,1),w-literal(aux38,1),w-literal(aux60,1),w-literal(aux37,1),w-literal(aux31,1),watched-or({modulo(aux125,13,0),gaceq(aux67,aux96)})}),watched-and({w-literal(aux103,1),w-literal(aux89,1),w-literal(aux19,1),w-literal(aux86,1),gaceq(M_00003_00006,M_00004_00003),w-literal(aux37,1),w-literal(aux31,1),watched-or({modulo(aux126,13,0),gaceq(aux67,aux65)})}),watched-and({w-literal(aux103,1),w-literal(aux71,1),w-literal(aux81,1),w-literal(aux38,1),w-literal(aux60,1),w-literal(aux37,1),w-literal(aux31,1),watched-or({modulo(aux127,13,0),div(M_00003_00002, 13, aux67)})})})
watched-or({watched-and({w-literal(aux61,1),w-literal(aux93,1),w-literal(aux80,1),w-literal(aux101,1),w-literal(aux26,1),w-literal(aux55,1),watched-or({gaceq(aux30,aux29),modulo(aux128,13,0)})}),watched-and({w-literal(aux61,1),w-literal(aux93,1),w-literal(aux80,1),w-literal(aux101,1),w-literal(aux50,1),w-literal(aux55,1),watched-or({gaceq(aux29,aux100),modulo(aux129,13,0)})}),watched-and({w-literal(aux61,1),w-literal(aux93,1),w-literal(aux80,1),w-literal(aux25,1),w-literal(aux26,1),w-literal(aux55,1),watched-or({gaceq(aux87,aux30),modulo(aux130,13,0)})}),watched-and({w-literal(aux61,1),w-literal(aux93,1),w-literal(aux80,1),w-literal(aux50,1),gaceq(M_00004_00006,M_00005_00006),gaceq(M_00004_00007,M_00005_00004),watched-or({gaceq(aux87,aux100),modulo(aux131,13,0)})}),watched-and({w-literal(aux61,1),w-literal(aux93,1),w-literal(aux49,1),w-literal(aux25,1),w-literal(aux26,1),w-literal(aux55,1),watched-or({gaceq(aux27,aux87),modulo(aux132,13,0)})}),watched-and({w-literal(aux61,1),w-literal(aux93,1),w-literal(aux101,1),w-literal(aux50,1),gaceq(M_00004_00006,M_00005_00003),w-literal(aux55,1),watched-or({gaceq(aux27,aux29),modulo(aux133,13,0)})}),watched-and({w-literal(aux61,1),w-literal(aux79,1),w-literal(aux49,1),w-literal(aux25,1),w-literal(aux26,1),w-literal(aux55,1),watched-or({gaceq(aux28,aux27),modulo(aux134,13,0)})}),watched-and({w-literal(aux61,1),w-literal(aux80,1),w-literal(aux101,1),gaceq(M_00004_00005,M_00005_00002),w-literal(aux26,1),w-literal(aux55,1),watched-or({gaceq(aux28,aux30),modulo(aux135,13,0)})}),watched-and({gaceq(M_00004_00002,M_00005_00001),w-literal(aux79,1),w-literal(aux49,1),w-literal(aux25,1),w-literal(aux26,1),w-literal(aux55,1),watched-or({gaceq(aux99,aux28),modulo(aux136,13,0)})}),watched-and({w-literal(aux93,1),w-literal(aux80,1),gaceq(M_00004_00004,M_00005_00001),w-literal(aux25,1),w-literal(aux26,1),w-literal(aux55,1),watched-or({gaceq(aux99,aux87),modulo(aux137,13,0)})})})
watched-or({watched-and({w-literal(aux69,1),w-literal(aux72,1),w-literal(aux85,1),w-literal(aux70,1),w-literal(aux95,1),watched-or({modulo(aux138,13,0),gaceq(aux78,aux76)})}),watched-and({w-literal(aux69,1),w-literal(aux72,1),w-literal(aux39,1),w-literal(aux70,1),w-literal(aux95,1),watched-or({modulo(aux139,13,0),gaceq(aux76,aux77)})}),watched-and({w-literal(aux69,1),w-literal(aux72,1),w-literal(aux84,1),gaceq(M_00005_00005,M_00006_00005),gaceq(M_00005_00006,M_00006_00003),watched-or({modulo(aux140,13,0),gaceq(aux78,aux43)})}),watched-and({w-literal(aux69,1),w-literal(aux72,1),w-literal(aux39,1),w-literal(aux84,1),w-literal(aux95,1),watched-or({modulo(aux141,13,0),gaceq(aux77,aux43)})}),watched-and({w-literal(aux69,1),w-literal(aux73,1),w-literal(aux85,1),w-literal(aux70,1),w-literal(aux95,1),watched-or({modulo(aux142,13,0),gaceq(aux75,aux78)})}),watched-and({w-literal(aux69,1),w-literal(aux39,1),w-literal(aux84,1),gaceq(M_00005_00005,M_00006_00002),w-literal(aux95,1),watched-or({modulo(aux143,13,0),gaceq(aux75,aux77)})}),watched-and({gaceq(M_00005_00002,M_00006_00001),w-literal(aux73,1),w-literal(aux85,1),w-literal(aux70,1),w-literal(aux95,1),watched-or({modulo(aux144,13,0),gaceq(aux44,aux75)})}),watched-and({w-literal(aux72,1),w-literal(aux39,1),gaceq(M_00005_00004,M_00006_00001),w-literal(aux70,1),w-literal(aux95,1),watched-or({modulo(aux145,13,0),gaceq(aux44,aux76)})})})
watched-or({watched-and({w-literal(aux15,1),w-literal(aux94,1),w-literal(aux91,1),w-literal(aux102,1),watched-or({gaceq(aux47,aux63),modulo(aux146,13,0)})}),watched-and({w-literal(aux15,1),w-literal(aux92,1),w-literal(aux91,1),w-literal(aux102,1),watched-or({gaceq(aux63,aux46),modulo(aux147,13,0)})}),watched-and({w-literal(aux15,1),gaceq(M_00007_00002,M_00006_00005),w-literal(aux90,1),gaceq(M_00007_00004,M_00006_00004),watched-or({gaceq(aux47,aux64),modulo(aux148,13,0)})}),watched-and({w-literal(aux15,1),w-literal(aux92,1),w-literal(aux90,1),w-literal(aux102,1),watched-or({gaceq(aux46,aux64),modulo(aux149,13,0)})}),watched-and({gaceq(M_00007_00001,M_00006_00002),w-literal(aux94,1),w-literal(aux91,1),w-literal(aux102,1),watched-or({gaceq(aux62,aux47),modulo(aux150,13,0)})}),watched-and({gaceq(M_00007_00001,M_00006_00004),w-literal(aux92,1),w-literal(aux90,1),w-literal(aux102,1),watched-or({gaceq(aux62,aux46),modulo(aux151,13,0)})})})
watched-or({watched-and({watched-or({modulo(aux152,13,0),gaceq(aux21,aux20)}),gaceq(M_00007_00002,M_00008_00001),w-literal(aux56,1),w-literal(aux83,1)}),watched-and({watched-or({modulo(aux153,13,0),gaceq(aux22,aux23)}),w-literal(aux58,1),w-literal(aux57,1),w-literal(aux83,1)}),watched-and({watched-or({modulo(aux154,13,0),gaceq(aux21,aux23)}),w-literal(aux57,1),gaceq(M_00007_00003,M_00008_00003),gaceq(M_00007_00004,M_00008_00001)}),watched-and({watched-or({modulo(aux155,13,0),gaceq(aux20,aux22)}),w-literal(aux58,1),w-literal(aux56,1),w-literal(aux83,1)})})
watched-or({watched-and({watched-or({div(M_00008_00001, 13, aux45),modulo(aux156,13,0)}),gaceq(M_00008_00002,M_00009_00001),w-literal(aux74,1)}),watched-and({watched-or({div(M_00008_00003, 13, aux45),modulo(aux157,13,0)}),gaceq(M_00008_00001,M_00009_00001),w-literal(aux74,1)})})
watched-or({div(M_00010_00001, 13, aux104),modulo(aux158,13,0)})
weightedsumleq([-1,1],[M_00002_00003,M_00002_00004],aux105)
weightedsumgeq([-1,1],[M_00002_00003,M_00002_00004],aux105)
weightedsumleq([-1,1],[M_00002_00003,M_00002_00006],aux106)
weightedsumgeq([-1,1],[M_00002_00003,M_00002_00006],aux106)
weightedsumleq([-1,1],[M_00002_00006,M_00002_00007],aux107)
weightedsumgeq([-1,1],[M_00002_00006,M_00002_00007],aux107)
weightedsumleq([-1,1],[M_00002_00007,M_00002_00008],aux108)
weightedsumgeq([-1,1],[M_00002_00007,M_00002_00008],aux108)
weightedsumleq([-1,1],[M_00002_00006,M_00002_00009],aux109)
weightedsumgeq([-1,1],[M_00002_00006,M_00002_00009],aux109)
weightedsumleq([-1,1],[M_00002_00008,M_00002_00009],aux110)
weightedsumgeq([-1,1],[M_00002_00008,M_00002_00009],aux110)
weightedsumleq([-1,1],[M_00002_00005,M_00002_00006],aux111)
weightedsumgeq([-1,1],[M_00002_00005,M_00002_00006],aux111)
weightedsumleq([-1,1],[M_00002_00005,M_00002_00008],aux112)
weightedsumgeq([-1,1],[M_00002_00005,M_00002_00008],aux112)
sumleq([M_00002_00004,-2],aux113)
sumgeq([M_00002_00004,-2],aux113)
weightedsumleq([-1,1],[M_00002_00002,M_00002_00003],aux114)
weightedsumgeq([-1,1],[M_00002_00002,M_00002_00003],aux114)
weightedsumleq([-1,1],[M_00002_00004,M_00002_00005],aux115)
weightedsumgeq([-1,1],[M_00002_00004,M_00002_00005],aux115)
weightedsumleq([-1,1],[M_00003_00002,M_00003_00005],aux116)
weightedsumgeq([-1,1],[M_00003_00002,M_00003_00005],aux116)
weightedsumleq([-1,1],[M_00003_00001,M_00003_00004],aux117)
weightedsumgeq([-1,1],[M_00003_00001,M_00003_00004],aux117)
weightedsumleq([-1,1],[M_00003_00005,M_00003_00006],aux118)
weightedsumgeq([-1,1],[M_00003_00005,M_00003_00006],aux118)
weightedsumleq([-1,1],[M_00003_00006,M_00003_00007],aux119)
weightedsumgeq([-1,1],[M_00003_00006,M_00003_00007],aux119)
weightedsumleq([-1,1],[M_00003_00005,M_00003_00008],aux120)
weightedsumgeq([-1,1],[M_00003_00005,M_00003_00008],aux120)
weightedsumleq([-1,1],[M_00003_00007,M_00003_00008],aux121)
weightedsumgeq([-1,1],[M_00003_00007,M_00003_00008],aux121)
weightedsumleq([-1,1],[M_00003_00004,M_00003_00005],aux122)
weightedsumgeq([-1,1],[M_00003_00004,M_00003_00005],aux122)
weightedsumleq([-1,1],[M_00003_00004,M_00003_00007],aux123)
weightedsumgeq([-1,1],[M_00003_00004,M_00003_00007],aux123)
weightedsumleq([-1,1],[M_00003_00001,M_00003_00002],aux124)
weightedsumgeq([-1,1],[M_00003_00001,M_00003_00002],aux124)
weightedsumleq([-1,1],[M_00003_00003,M_00003_00004],aux125)
weightedsumgeq([-1,1],[M_00003_00003,M_00003_00004],aux125)
weightedsumleq([-1,1],[M_00003_00003,M_00003_00006],aux126)
weightedsumgeq([-1,1],[M_00003_00003,M_00003_00006],aux126)
weightedsumleq([-1,1],[M_00003_00002,M_00003_00003],aux127)
weightedsumgeq([-1,1],[M_00003_00002,M_00003_00003],aux127)
weightedsumleq([-1,1],[M_00004_00005,M_00004_00006],aux128)
weightedsumgeq([-1,1],[M_00004_00005,M_00004_00006],aux128)
weightedsumleq([-1,1],[M_00004_00006,M_00004_00007],aux129)
weightedsumgeq([-1,1],[M_00004_00006,M_00004_00007],aux129)
weightedsumleq([-1,1],[M_00004_00004,M_00004_00005],aux130)
weightedsumgeq([-1,1],[M_00004_00004,M_00004_00005],aux130)
weightedsumleq([-1,1],[M_00004_00004,M_00004_00007],aux131)
weightedsumgeq([-1,1],[M_00004_00004,M_00004_00007],aux131)
weightedsumleq([-1,1],[M_00004_00003,M_00004_00004],aux132)
weightedsumgeq([-1,1],[M_00004_00003,M_00004_00004],aux132)
weightedsumleq([-1,1],[M_00004_00003,M_00004_00006],aux133)
weightedsumgeq([-1,1],[M_00004_00003,M_00004_00006],aux133)
weightedsumleq([-1,1],[M_00004_00002,M_00004_00003],aux134)
weightedsumgeq([-1,1],[M_00004_00002,M_00004_00003],aux134)
weightedsumleq([-1,1],[M_00004_00002,M_00004_00005],aux135)
weightedsumgeq([-1,1],[M_00004_00002,M_00004_00005],aux135)
weightedsumleq([-1,1],[M_00004_00001,M_00004_00002],aux136)
weightedsumgeq([-1,1],[M_00004_00001,M_00004_00002],aux136)
weightedsumleq([-1,1],[M_00004_00001,M_00004_00004],aux137)
weightedsumgeq([-1,1],[M_00004_00001,M_00004_00004],aux137)
weightedsumleq([-1,1],[M_00005_00003,M_00005_00004],aux138)
weightedsumgeq([-1,1],[M_00005_00003,M_00005_00004],aux138)
weightedsumleq([-1,1],[M_00005_00004,M_00005_00005],aux139)
weightedsumgeq([-1,1],[M_00005_00004,M_00005_00005],aux139)
weightedsumleq([-1,1],[M_00005_00003,M_00005_00006],aux140)
weightedsumgeq([-1,1],[M_00005_00003,M_00005_00006],aux140)
weightedsumleq([-1,1],[M_00005_00005,M_00005_00006],aux141)
weightedsumgeq([-1,1],[M_00005_00005,M_00005_00006],aux141)
weightedsumleq([-1,1],[M_00005_00002,M_00005_00003],aux142)
weightedsumgeq([-1,1],[M_00005_00002,M_00005_00003],aux142)
weightedsumleq([-1,1],[M_00005_00002,M_00005_00005],aux143)
weightedsumgeq([-1,1],[M_00005_00002,M_00005_00005],aux143)
weightedsumleq([-1,1],[M_00005_00001,M_00005_00002],aux144)
weightedsumgeq([-1,1],[M_00005_00001,M_00005_00002],aux144)
weightedsumleq([-1,1],[M_00005_00001,M_00005_00004],aux145)
weightedsumgeq([-1,1],[M_00005_00001,M_00005_00004],aux145)
weightedsumleq([-1,1],[M_00006_00002,M_00006_00003],aux146)
weightedsumgeq([-1,1],[M_00006_00002,M_00006_00003],aux146)
weightedsumleq([-1,1],[M_00006_00003,M_00006_00004],aux147)
weightedsumgeq([-1,1],[M_00006_00003,M_00006_00004],aux147)
weightedsumleq([-1,1],[M_00006_00002,M_00006_00005],aux148)
weightedsumgeq([-1,1],[M_00006_00002,M_00006_00005],aux148)
weightedsumleq([-1,1],[M_00006_00004,M_00006_00005],aux149)
weightedsumgeq([-1,1],[M_00006_00004,M_00006_00005],aux149)
weightedsumleq([-1,1],[M_00006_00001,M_00006_00002],aux150)
weightedsumgeq([-1,1],[M_00006_00001,M_00006_00002],aux150)
weightedsumleq([-1,1],[M_00006_00001,M_00006_00004],aux151)
weightedsumgeq([-1,1],[M_00006_00001,M_00006_00004],aux151)
weightedsumleq([-1,1],[M_00007_00001,M_00007_00002],aux152)
weightedsumgeq([-1,1],[M_00007_00001,M_00007_00002],aux152)
weightedsumleq([-1,1],[M_00007_00003,M_00007_00004],aux153)
weightedsumgeq([-1,1],[M_00007_00003,M_00007_00004],aux153)
weightedsumleq([-1,1],[M_00007_00001,M_00007_00004],aux154)
weightedsumgeq([-1,1],[M_00007_00001,M_00007_00004],aux154)
weightedsumleq([-1,1],[M_00007_00002,M_00007_00003],aux155)
weightedsumgeq([-1,1],[M_00007_00002,M_00007_00003],aux155)
weightedsumleq([-1,1],[M_00008_00001,M_00008_00002],aux156)
weightedsumgeq([-1,1],[M_00008_00001,M_00008_00002],aux156)
weightedsumleq([-1,1],[M_00008_00002,M_00008_00003],aux157)
weightedsumgeq([-1,1],[M_00008_00002,M_00008_00003],aux157)
weightedsumleq([1,-1],[M_00010_00001,M_00009_00001],aux158)
weightedsumgeq([1,-1],[M_00010_00001,M_00009_00001],aux158)
**EOF**
