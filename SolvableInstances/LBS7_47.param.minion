MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 28
# CSE_active_eliminated_expressions = 75
# CSE_active_total_size = 84
**VARIABLES**
DISCRETE M_00002_00002 #
{5..9}
**CONSTRAINTS**
w-inintervalset(M_00002_00002, [5,6,9,9])
**VARIABLES**
DISCRETE M_00002_00003 #
{44..45}
DISCRETE M_00002_00004 #
{5..18}
**CONSTRAINTS**
w-inintervalset(M_00002_00004, [5,6,9,9,18,18])
**VARIABLES**
DISCRETE M_00002_00005 #
{5..44}
**CONSTRAINTS**
w-inintervalset(M_00002_00005, [5,6,9,9,18,18,44,44])
**VARIABLES**
DISCRETE M_00003_00002 #
{5..44}
**CONSTRAINTS**
w-inintervalset(M_00003_00002, [5,6,9,9,18,18,44,44])
**VARIABLES**
DISCRETE M_00003_00003 #
{6..45}
**CONSTRAINTS**
w-inintervalset(M_00003_00003, [6,6,9,9,18,18,44,45])
**VARIABLES**
DISCRETE M_00003_00004 #
{5..44}
**CONSTRAINTS**
w-inintervalset(M_00003_00004, [5,6,9,9,18,18,44,44])
**VARIABLES**
DISCRETE M_00003_00005 #
{6..44}
**CONSTRAINTS**
w-inintervalset(M_00003_00005, [6,6,9,9,18,18,44,44])
**VARIABLES**
DISCRETE M_00004_00001 #
{5..50}
**CONSTRAINTS**
w-inintervalset(M_00004_00001, [5,6,9,9,18,18,44,45,50,50])
**VARIABLES**
DISCRETE M_00004_00002 #
{5..45}
**CONSTRAINTS**
w-inintervalset(M_00004_00002, [5,6,9,9,18,18,44,45])
**VARIABLES**
DISCRETE M_00004_00003 #
{5..45}
**CONSTRAINTS**
w-inintervalset(M_00004_00003, [5,6,9,9,18,18,44,45])
**VARIABLES**
DISCRETE M_00004_00004 #
{5..44}
**CONSTRAINTS**
w-inintervalset(M_00004_00004, [5,6,9,9,18,18,44,44])
**VARIABLES**
DISCRETE M_00005_00001 #
{5..50}
**CONSTRAINTS**
w-inintervalset(M_00005_00001, [5,6,9,9,18,18,44,45,50,50])
**VARIABLES**
DISCRETE M_00005_00002 #
{5..45}
**CONSTRAINTS**
w-inintervalset(M_00005_00002, [5,6,9,9,18,18,44,45])
**VARIABLES**
DISCRETE M_00005_00003 #
{5..45}
**CONSTRAINTS**
w-inintervalset(M_00005_00003, [5,6,9,9,18,18,44,45])
**VARIABLES**
DISCRETE M_00006_00001 #
{5..50}
**CONSTRAINTS**
w-inintervalset(M_00006_00001, [5,6,9,9,18,18,44,45,50,50])
**VARIABLES**
DISCRETE M_00006_00002 #
{5..45}
**CONSTRAINTS**
w-inintervalset(M_00006_00002, [5,6,9,9,18,18,44,45])
**VARIABLES**
DISCRETE M_00007_00001 #
{5..50}
**CONSTRAINTS**
w-inintervalset(M_00007_00001, [5,6,9,9,18,18,44,45,50,50])
**VARIABLES**
DISCRETE aux13 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00005/13)
{0..3}
**CONSTRAINTS**
w-inintervalset(aux13, [0,1,3,3])
**VARIABLES**
BOOL aux14 #Active-CSE: 5 occurrences of this expression or equivalent: (M_00003_00005=M_00004_00004)
DISCRETE aux15 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00005/13)
{0..3}
**CONSTRAINTS**
w-inintervalset(aux15, [0,1,3,3])
**VARIABLES**
DISCRETE aux16 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00003/13)
{0..3}
**CONSTRAINTS**
w-inintervalset(aux16, [0,1,3,3])
**VARIABLES**
DISCRETE aux17 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00005_00002/13)
{0..3}
**CONSTRAINTS**
w-inintervalset(aux17, [0,1,3,3])
**VARIABLES**
BOOL aux18 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00004=M_00005_00003)
BOOL aux19 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00001=M_00005_00001)
BOOL aux20 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00002=M_00005_00002)
BOOL aux21 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00004=M_00003_00003)
BOOL aux22 #Active-CSE: 4 occurrences of this expression or equivalent: (M_00002_00002=M_00003_00002)
DISCRETE aux23 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00002/13)
{0..3}
**CONSTRAINTS**
w-inintervalset(aux23, [0,1,3,3])
**VARIABLES**
DISCRETE aux24 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00004/13)
{0..3}
**CONSTRAINTS**
w-inintervalset(aux24, [0,1,3,3])
**VARIABLES**
BOOL aux25 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00004=M_00004_00004)
BOOL aux26 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00003=M_00004_00002)
BOOL aux27 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00005_00003=M_00006_00002)
BOOL aux28 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00005_00001=M_00006_00001)
BOOL aux29 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00003=M_00005_00002)
BOOL aux30 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00003=M_00005_00003)
BOOL aux31 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00004=M_00004_00003)
BOOL aux32 #Active-CSE: 4 occurrences of this expression or equivalent: (M_00003_00003=M_00004_00003)
BOOL aux33 #Active-CSE: 4 occurrences of this expression or equivalent: (M_00003_00002=M_00004_00002)
BOOL aux34 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00004=M_00003_00004)
BOOL aux35 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00003=M_00003_00003)
BOOL aux36 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00005=M_00003_00004)
DISCRETE aux37 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00002/13)
{0..3}
**CONSTRAINTS**
w-inintervalset(aux37, [0,1,3,3])
**VARIABLES**
DISCRETE aux38 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00003/13)
{0..3}
**CONSTRAINTS**
w-inintervalset(aux38, [0,1,3,3])
**VARIABLES**
DISCRETE aux39 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00001/13)
{0..3}
**CONSTRAINTS**
w-inintervalset(aux39, [0,1,3,3])
**VARIABLES**
DISCRETE aux40 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00004/13)
{0..3}
**CONSTRAINTS**
w-inintervalset(aux40, [0,1,3,3])
**VARIABLES**
DISCRETE aux41 #
{0..3}
**CONSTRAINTS**
w-inintervalset(aux41, [0,1,3,3])
**VARIABLES**
DISCRETE aux42 #( - M_00002_00003 + M_00002_00004)
{-40..-26}
**CONSTRAINTS**
w-inintervalset(aux42, [-40,-38,-36,-35,-27,-26])
**VARIABLES**
DISCRETE aux43 #( - M_00002_00002 + M_00002_00003)
{35..40}
**CONSTRAINTS**
w-inintervalset(aux43, [35,36,38,40])
**VARIABLES**
DISCRETE aux44 #( - M_00002_00005 + 6)
{-38..1}
**CONSTRAINTS**
w-inintervalset(aux44, [-38,-38,-12,-12,-3,-3,0,1])
**VARIABLES**
DISCRETE aux45 #( - M_00002_00002 + M_00002_00005)
{-4..39}
**CONSTRAINTS**
w-inintervalset(aux45, [-4,-3,-1,1,3,4,9,9,12,13,35,35,38,39])
**VARIABLES**
DISCRETE aux46 #( - M_00002_00004 + M_00002_00005)
{-13..39}
**CONSTRAINTS**
w-inintervalset(aux46, [-13,-12,-9,-9,-4,-3,-1,1,3,4,9,9,12,13,26,26,35,35,38,39])
**VARIABLES**
DISCRETE aux47 #( - M_00002_00003 + 6)
{-39..-38}
DISCRETE aux48 #(M_00003_00002 + -50)
{-45..-6}
**CONSTRAINTS**
w-inintervalset(aux48, [-45,-44,-41,-41,-32,-32,-6,-6])
**VARIABLES**
DISCRETE aux49 #( - M_00003_00002 + M_00003_00003)
{-3..40}
**CONSTRAINTS**
w-inintervalset(aux49, [-3,-3,0,1,3,4,9,9,12,13,26,27,35,36,38,40])
**VARIABLES**
DISCRETE aux50 #( - M_00003_00003 + M_00003_00004)
{-40..12}
**CONSTRAINTS**
w-inintervalset(aux50, [-40,-38,-36,-35,-27,-26,-13,-12,-9,-9,-4,-3,-1,0,3,3,9,9,12,12])
**VARIABLES**
DISCRETE aux51 #( - M_00003_00002 + M_00003_00005)
{-38..39}
**CONSTRAINTS**
w-inintervalset(aux51, [-38,-38,-35,-35,-26,-26,-12,-12,-9,-9,-3,-3,0,1,3,4,9,9,12,13,26,26,35,35,38,39])
**VARIABLES**
DISCRETE aux52 #( - M_00003_00004 + M_00003_00005)
{-38..39}
**CONSTRAINTS**
w-inintervalset(aux52, [-38,-38,-35,-35,-26,-26,-12,-12,-9,-9,-3,-3,0,1,3,4,9,9,12,13,26,26,35,35,38,39])
**VARIABLES**
DISCRETE aux53 #(M_00003_00004 + -50)
{-45..-6}
**CONSTRAINTS**
w-inintervalset(aux53, [-45,-44,-41,-41,-32,-32,-6,-6])
**VARIABLES**
DISCRETE aux54 #( - M_00003_00005 + -1)
{-45..-7}
**CONSTRAINTS**
w-inintervalset(aux54, [-45,-45,-19,-19,-10,-10,-7,-7])
**VARIABLES**
DISCRETE aux55 #( - M_00004_00004 + -1)
{-45..-6}
**CONSTRAINTS**
w-inintervalset(aux55, [-45,-45,-19,-19,-10,-10,-7,-6])
**VARIABLES**
DISCRETE aux56 #( - M_00004_00002 + M_00004_00003)
{-40..40}
**CONSTRAINTS**
w-inintervalset(aux56, [-40,-38,-36,-35,-27,-26,-13,-12,-9,-9,-4,-3,-1,1,3,4,9,9,12,13,26,27,35,36,38,40])
**VARIABLES**
DISCRETE aux57 #( - M_00004_00003 + M_00004_00004)
{-40..39}
**CONSTRAINTS**
w-inintervalset(aux57, [-40,-38,-36,-35,-27,-26,-13,-12,-9,-9,-4,-3,-1,1,3,4,9,9,12,13,26,26,35,35,38,39])
**VARIABLES**
DISCRETE aux58 #( - M_00004_00001 + M_00004_00002)
{-45..39}
**CONSTRAINTS**
w-inintervalset(aux58, [-45,-44,-41,-38,-36,-35,-32,-32,-27,-26,-13,-12,-9,-9,-6,-3,-1,1,3,4,9,9,12,13,26,27,35,36,38,39])
**VARIABLES**
DISCRETE aux59 #( - M_00004_00001 + M_00004_00004)
{-45..39}
**CONSTRAINTS**
w-inintervalset(aux59, [-45,-44,-41,-38,-36,-35,-32,-32,-27,-26,-13,-12,-9,-9,-6,-6,-4,-3,-1,1,3,4,9,9,12,13,26,26,35,35,38,39])
**VARIABLES**
DISCRETE aux60 #(-1 - M_00005_00003)
{-46..-6}
**CONSTRAINTS**
w-inintervalset(aux60, [-46,-45,-19,-19,-10,-10,-7,-6])
**VARIABLES**
DISCRETE aux61 #( - M_00005_00001 + M_00005_00002)
{-45..40}
**CONSTRAINTS**
w-inintervalset(aux61, [-45,-44,-41,-38,-36,-35,-32,-32,-27,-26,-13,-12,-9,-9,-6,-3,-1,1,3,4,9,9,12,13,26,27,35,36,38,40])
**VARIABLES**
DISCRETE aux62 #( - M_00005_00002 + M_00005_00003)
{-39..39}
**CONSTRAINTS**
w-inintervalset(aux62, [-39,-38,-36,-35,-27,-26,-13,-12,-9,-9,-4,-3,-1,1,3,4,9,9,12,13,26,27,35,36,38,39])
**VARIABLES**
DISCRETE aux63 #( - M_00006_00001 + M_00006_00002)
{-39..39}
**CONSTRAINTS**
w-inintervalset(aux63, [-39,-38,-36,-35,-32,-32,-27,-26,-13,-12,-9,-9,-6,-3,-1,1,3,4,9,9,12,13,26,27,35,36,38,39])
**VARIABLES**
DISCRETE aux64 #(-1 - M_00006_00002)
{-46..-6}
**CONSTRAINTS**
w-inintervalset(aux64, [-46,-45,-19,-19,-10,-10,-7,-6])
**VARIABLES**
**VARIABLES**
ALIAS cards[7]=[50, 9, 45, 18, 5, 44, 6]
**SEARCH**
PRINT[[M_00002_00002],[M_00002_00003],[M_00002_00004],[M_00002_00005],[M_00003_00002],[M_00003_00003],[M_00003_00004],[M_00003_00005],[M_00004_00001],[M_00004_00002],[M_00004_00003],[M_00004_00004],[M_00005_00001],[M_00005_00002],[M_00005_00003],[M_00006_00001],[M_00006_00002],[M_00007_00001]]
VARORDER STATIC [M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, M_00005_00001, M_00005_00002, M_00005_00003, M_00006_00001, M_00006_00002, M_00007_00001]
**CONSTRAINTS**
div(M_00006_00002, 13, aux41)
div(M_00002_00005, 13, aux13)
reify(gaceq(M_00003_00005,M_00004_00004), aux14)
div(M_00003_00005, 13, aux15)
div(M_00003_00003, 13, aux16)
div(M_00005_00002, 13, aux17)
reify(gaceq(M_00004_00004,M_00005_00003), aux18)
reify(gaceq(M_00004_00001,M_00005_00001), aux19)
reify(gaceq(M_00004_00002,M_00005_00002), aux20)
reify(gaceq(M_00002_00004,M_00003_00003), aux21)
reify(gaceq(M_00002_00002,M_00003_00002), aux22)
div(M_00003_00002, 13, aux23)
div(M_00003_00004, 13, aux24)
reify(gaceq(M_00003_00004,M_00004_00004), aux25)
reify(gaceq(M_00003_00003,M_00004_00002), aux26)
reify(gaceq(M_00005_00003,M_00006_00002), aux27)
reify(gaceq(M_00005_00001,M_00006_00001), aux28)
reify(gaceq(M_00004_00003,M_00005_00002), aux29)
reify(gaceq(M_00004_00003,M_00005_00003), aux30)
reify(gaceq(M_00003_00004,M_00004_00003), aux31)
reify(gaceq(M_00003_00003,M_00004_00003), aux32)
reify(gaceq(M_00003_00002,M_00004_00002), aux33)
reify(gaceq(M_00002_00004,M_00003_00004), aux34)
reify(gaceq(M_00002_00003,M_00003_00003), aux35)
reify(gaceq(M_00002_00005,M_00003_00004), aux36)
div(M_00004_00002, 13, aux37)
div(M_00004_00003, 13, aux38)
div(M_00004_00001, 13, aux39)
div(M_00004_00004, 13, aux40)
gccweak([M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005],[-1],[0])
gccweak([M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005],[-1],[0])
gccweak([M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004],[-1],[0])
gccweak([M_00005_00001, M_00005_00002, M_00005_00003],[-1],[0])
gccweak([M_00006_00001, M_00006_00002],[-1],[0])
gccweak([M_00007_00001],[-1],[0])
watched-or({watched-and({w-literal(M_00002_00002,5),w-literal(M_00002_00003,45),w-literal(M_00002_00004,18),w-literal(M_00002_00005,44)}),watched-and({w-literal(M_00002_00002,9),w-literal(M_00002_00004,5),w-literal(M_00002_00003,45),w-literal(M_00002_00005,44)}),watched-and({w-literal(M_00002_00002,9),w-literal(M_00002_00003,44),w-literal(M_00002_00004,18),w-literal(M_00002_00005,5)}),watched-and({w-literal(M_00002_00002,9),w-literal(M_00002_00003,45),w-literal(M_00002_00004,18),w-literal(M_00002_00005,44)})})
watched-or({watched-and({w-literal(M_00003_00005,6),w-literal(aux22,1),w-literal(aux21,1),w-literal(aux36,1),modulo(aux42,13,0)}),watched-and({w-literal(M_00003_00005,6),gaceq(M_00002_00003,M_00003_00002),w-literal(aux21,1),w-literal(aux36,1),modulo(aux43,13,0)}),watched-and({w-literal(M_00003_00005,6),watched-or({w-literal(aux13,0),modulo(aux44,13,0)}),w-literal(aux22,1),w-literal(aux35,1),w-literal(aux34,1)}),watched-and({w-literal(M_00003_00005,6),w-literal(aux35,1),w-literal(aux34,1),gaceq(M_00002_00005,M_00003_00002),watched-or({modulo(aux45,13,0),div(M_00002_00002, 13, aux13)})}),watched-and({w-literal(M_00003_00005,6),w-literal(aux22,1),w-literal(aux35,1),w-literal(aux36,1),watched-or({modulo(aux46,13,0),div(M_00002_00004, 13, aux13)})}),watched-and({w-literal(M_00003_00003,6),modulo(aux47,13,0),w-literal(aux22,1),w-literal(aux34,1),gaceq(M_00002_00005,M_00003_00005)})})
watched-or({watched-and({watched-or({modulo(aux48,13,0),w-literal(aux23,3)}),gaceq(M_00003_00002,M_00004_00001),w-literal(aux26,1),w-literal(aux31,1),w-literal(aux14,1)}),watched-and({w-literal(aux26,1),w-literal(aux31,1),w-literal(aux14,1),watched-or({modulo(aux49,13,0),gaceq(aux23,aux16)}),w-literal(M_00004_00001,50)}),watched-and({w-literal(aux33,1),w-literal(aux31,1),w-literal(aux14,1),watched-or({modulo(aux50,13,0),gaceq(aux16,aux24)}),w-literal(M_00004_00001,50)}),watched-and({w-literal(aux32,1),w-literal(aux25,1),gaceq(M_00003_00005,M_00004_00002),watched-or({modulo(aux51,13,0),gaceq(aux23,aux15)}),w-literal(M_00004_00001,50)}),watched-and({w-literal(aux33,1),w-literal(aux32,1),w-literal(aux14,1),watched-or({modulo(aux52,13,0),gaceq(aux24,aux15)}),w-literal(M_00004_00001,50)}),watched-and({watched-or({modulo(aux53,13,0),w-literal(aux24,3)}),w-literal(aux33,1),w-literal(aux32,1),gaceq(M_00003_00004,M_00004_00001),w-literal(aux14,1)}),watched-and({w-literal(aux33,1),w-literal(aux32,1),w-literal(aux25,1),modulo(aux54,13,0),w-literal(M_00004_00001,50)})})
watched-or({watched-and({modulo(aux55,13,0),w-literal(aux19,1),w-literal(aux20,1),w-literal(aux30,1)}),watched-and({w-literal(aux19,1),w-literal(aux29,1),w-literal(aux18,1),watched-or({gaceq(aux37,aux38),modulo(aux56,13,0)})}),watched-and({w-literal(aux19,1),w-literal(aux20,1),w-literal(aux18,1),watched-or({gaceq(aux38,aux40),modulo(aux57,13,0)})}),watched-and({gaceq(M_00004_00002,M_00005_00001),w-literal(aux29,1),w-literal(aux18,1),watched-or({gaceq(aux39,aux37),modulo(aux58,13,0)})}),watched-and({w-literal(aux20,1),w-literal(aux30,1),gaceq(M_00004_00004,M_00005_00001),watched-or({gaceq(aux39,aux40),modulo(aux59,13,0)})})})
watched-or({watched-and({w-literal(aux28,1),gaceq(M_00005_00002,M_00006_00002),modulo(aux60,13,0)}),watched-and({gaceq(M_00005_00002,M_00006_00001),w-literal(aux27,1),watched-or({modulo(aux61,13,0),div(M_00005_00001, 13, aux17)})}),watched-and({w-literal(aux28,1),w-literal(aux27,1),watched-or({modulo(aux62,13,0),div(M_00005_00003, 13, aux17)})})})
watched-or({watched-and({gaceq(M_00007_00001,M_00006_00002),watched-or({div(M_00006_00001, 13, aux41),modulo(aux63,13,0)})}),watched-and({gaceq(M_00007_00001,M_00006_00001),modulo(aux64,13,0)})})
weightedsumleq([-1,1],[M_00002_00003,M_00002_00004],aux42)
weightedsumgeq([-1,1],[M_00002_00003,M_00002_00004],aux42)
weightedsumleq([-1,1],[M_00002_00002,M_00002_00003],aux43)
weightedsumgeq([-1,1],[M_00002_00002,M_00002_00003],aux43)
weightedsumleq([-1,1],[M_00002_00005,6],aux44)
weightedsumgeq([-1,1],[M_00002_00005,6],aux44)
weightedsumleq([-1,1],[M_00002_00002,M_00002_00005],aux45)
weightedsumgeq([-1,1],[M_00002_00002,M_00002_00005],aux45)
weightedsumleq([-1,1],[M_00002_00004,M_00002_00005],aux46)
weightedsumgeq([-1,1],[M_00002_00004,M_00002_00005],aux46)
weightedsumleq([-1,1],[M_00002_00003,6],aux47)
weightedsumgeq([-1,1],[M_00002_00003,6],aux47)
sumleq([M_00003_00002,-50],aux48)
sumgeq([M_00003_00002,-50],aux48)
weightedsumleq([-1,1],[M_00003_00002,M_00003_00003],aux49)
weightedsumgeq([-1,1],[M_00003_00002,M_00003_00003],aux49)
weightedsumleq([-1,1],[M_00003_00003,M_00003_00004],aux50)
weightedsumgeq([-1,1],[M_00003_00003,M_00003_00004],aux50)
weightedsumleq([-1,1],[M_00003_00002,M_00003_00005],aux51)
weightedsumgeq([-1,1],[M_00003_00002,M_00003_00005],aux51)
weightedsumleq([-1,1],[M_00003_00004,M_00003_00005],aux52)
weightedsumgeq([-1,1],[M_00003_00004,M_00003_00005],aux52)
sumleq([M_00003_00004,-50],aux53)
sumgeq([M_00003_00004,-50],aux53)
weightedsumleq([-1,1],[M_00003_00005,-1],aux54)
weightedsumgeq([-1,1],[M_00003_00005,-1],aux54)
weightedsumleq([-1,1],[M_00004_00004,-1],aux55)
weightedsumgeq([-1,1],[M_00004_00004,-1],aux55)
weightedsumleq([-1,1],[M_00004_00002,M_00004_00003],aux56)
weightedsumgeq([-1,1],[M_00004_00002,M_00004_00003],aux56)
weightedsumleq([-1,1],[M_00004_00003,M_00004_00004],aux57)
weightedsumgeq([-1,1],[M_00004_00003,M_00004_00004],aux57)
weightedsumleq([-1,1],[M_00004_00001,M_00004_00002],aux58)
weightedsumgeq([-1,1],[M_00004_00001,M_00004_00002],aux58)
weightedsumleq([-1,1],[M_00004_00001,M_00004_00004],aux59)
weightedsumgeq([-1,1],[M_00004_00001,M_00004_00004],aux59)
weightedsumleq([1,-1],[-1,M_00005_00003],aux60)
weightedsumgeq([1,-1],[-1,M_00005_00003],aux60)
weightedsumleq([-1,1],[M_00005_00001,M_00005_00002],aux61)
weightedsumgeq([-1,1],[M_00005_00001,M_00005_00002],aux61)
weightedsumleq([-1,1],[M_00005_00002,M_00005_00003],aux62)
weightedsumgeq([-1,1],[M_00005_00002,M_00005_00003],aux62)
weightedsumleq([-1,1],[M_00006_00001,M_00006_00002],aux63)
weightedsumgeq([-1,1],[M_00006_00001,M_00006_00002],aux63)
weightedsumleq([1,-1],[-1,M_00006_00002],aux64)
weightedsumgeq([1,-1],[-1,M_00006_00002],aux64)
**EOF**
