MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 71
# CSE_active_eliminated_expressions = 261
# CSE_active_total_size = 213
**VARIABLES**
DISCRETE M_00002_00001 #
{5..44}
**CONSTRAINTS**
w-inintervalset(M_00002_00001, [5,5,8,8,15,15,27,29,31,31,41,41,44,44])
**VARIABLES**
DISCRETE M_00002_00002 #
{29..31}
**CONSTRAINTS**
w-inintervalset(M_00002_00002, [29,29,31,31])
**VARIABLES**
DISCRETE M_00002_00003 #
{5..31}
**CONSTRAINTS**
w-inintervalset(M_00002_00003, [5,5,8,8,15,15,27,29,31,31])
**VARIABLES**
DISCRETE M_00002_00004 #
{5..15}
**CONSTRAINTS**
w-inintervalset(M_00002_00004, [5,5,8,8,15,15])
**VARIABLES**
DISCRETE M_00002_00005 #
{15..28}
**CONSTRAINTS**
w-inintervalset(M_00002_00005, [15,15,27,28])
**VARIABLES**
DISCRETE M_00002_00006 #
{27..41}
**CONSTRAINTS**
w-inintervalset(M_00002_00006, [27,29,31,31,41,41])
**VARIABLES**
DISCRETE M_00002_00007 #
{28..41}
**CONSTRAINTS**
w-inintervalset(M_00002_00007, [28,29,31,31,41,41])
**VARIABLES**
DISCRETE M_00003_00001 #
{5..44}
**CONSTRAINTS**
w-inintervalset(M_00003_00001, [5,5,8,8,15,15,27,29,31,31,41,41,44,44])
**VARIABLES**
DISCRETE M_00003_00002 #
{5..31}
**CONSTRAINTS**
w-inintervalset(M_00003_00002, [5,5,8,8,15,15,27,29,31,31])
**VARIABLES**
DISCRETE M_00003_00003 #
{5..31}
**CONSTRAINTS**
w-inintervalset(M_00003_00003, [5,5,8,8,15,15,27,29,31,31])
**VARIABLES**
DISCRETE M_00003_00004 #
{5..28}
**CONSTRAINTS**
w-inintervalset(M_00003_00004, [5,5,8,8,15,15,27,28])
**VARIABLES**
DISCRETE M_00003_00005 #
{15..41}
**CONSTRAINTS**
w-inintervalset(M_00003_00005, [15,15,27,29,31,31,41,41])
**VARIABLES**
DISCRETE M_00003_00006 #
{27..41}
**CONSTRAINTS**
w-inintervalset(M_00003_00006, [27,29,31,31,41,41])
**VARIABLES**
DISCRETE M_00004_00001 #
{5..44}
**CONSTRAINTS**
w-inintervalset(M_00004_00001, [5,5,8,8,15,15,27,29,31,31,41,41,44,44])
**VARIABLES**
DISCRETE M_00004_00002 #
{5..41}
**CONSTRAINTS**
w-inintervalset(M_00004_00002, [5,5,8,8,15,15,27,29,31,31,41,41])
**VARIABLES**
DISCRETE M_00004_00003 #
{5..41}
**CONSTRAINTS**
w-inintervalset(M_00004_00003, [5,5,8,8,15,15,27,29,31,31,41,41])
**VARIABLES**
DISCRETE M_00004_00004 #
{5..41}
**CONSTRAINTS**
w-inintervalset(M_00004_00004, [5,5,8,8,15,15,27,29,31,31,41,41])
**VARIABLES**
DISCRETE M_00004_00005 #
{15..41}
**CONSTRAINTS**
w-inintervalset(M_00004_00005, [15,15,27,29,31,31,41,41])
**VARIABLES**
DISCRETE M_00004_00006 #
{8..41}
**CONSTRAINTS**
w-inintervalset(M_00004_00006, [8,8,15,15,27,29,31,31,41,41])
**VARIABLES**
DISCRETE M_00005_00001 #
{5..44}
**CONSTRAINTS**
w-inintervalset(M_00005_00001, [5,5,8,8,15,15,27,29,31,31,41,41,44,44])
**VARIABLES**
DISCRETE M_00005_00002 #
{5..41}
**CONSTRAINTS**
w-inintervalset(M_00005_00002, [5,5,8,8,15,15,27,29,31,31,41,41])
**VARIABLES**
DISCRETE M_00005_00003 #
{5..41}
**CONSTRAINTS**
w-inintervalset(M_00005_00003, [5,5,8,8,15,15,27,29,31,31,41,41])
**VARIABLES**
DISCRETE M_00005_00004 #
{5..41}
**CONSTRAINTS**
w-inintervalset(M_00005_00004, [5,5,8,8,15,15,27,29,31,31,41,41])
**VARIABLES**
DISCRETE M_00005_00005 #
{8..41}
**CONSTRAINTS**
w-inintervalset(M_00005_00005, [8,8,15,15,27,29,31,31,41,41])
**VARIABLES**
DISCRETE M_00006_00001 #
{5..44}
**CONSTRAINTS**
w-inintervalset(M_00006_00001, [5,5,8,8,15,15,27,29,31,31,41,41,44,44])
**VARIABLES**
DISCRETE M_00006_00002 #
{5..41}
**CONSTRAINTS**
w-inintervalset(M_00006_00002, [5,5,8,8,15,15,27,29,31,31,41,41])
**VARIABLES**
DISCRETE M_00006_00003 #
{5..41}
**CONSTRAINTS**
w-inintervalset(M_00006_00003, [5,5,8,8,15,15,27,29,31,31,41,41])
**VARIABLES**
DISCRETE M_00006_00004 #
{5..41}
**CONSTRAINTS**
w-inintervalset(M_00006_00004, [5,5,8,8,15,15,27,29,31,31,41,41])
**VARIABLES**
DISCRETE M_00007_00001 #
{5..44}
**CONSTRAINTS**
w-inintervalset(M_00007_00001, [5,5,8,8,15,15,27,29,31,31,41,41,44,44])
**VARIABLES**
DISCRETE M_00007_00002 #
{5..41}
**CONSTRAINTS**
w-inintervalset(M_00007_00002, [5,5,8,8,15,15,27,29,31,31,41,41])
**VARIABLES**
DISCRETE M_00007_00003 #
{5..41}
**CONSTRAINTS**
w-inintervalset(M_00007_00003, [5,5,8,8,15,15,27,29,31,31,41,41])
**VARIABLES**
DISCRETE M_00008_00001 #
{5..44}
**CONSTRAINTS**
w-inintervalset(M_00008_00001, [5,5,8,8,15,15,27,29,31,31,41,41,44,44])
**VARIABLES**
DISCRETE M_00008_00002 #
{5..41}
**CONSTRAINTS**
w-inintervalset(M_00008_00002, [5,5,8,8,15,15,27,29,31,31,41,41])
**VARIABLES**
DISCRETE M_00009_00001 #
{5..44}
**CONSTRAINTS**
w-inintervalset(M_00009_00001, [5,5,8,8,15,15,27,29,31,31,41,41,44,44])
**VARIABLES**
DISCRETE aux13 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00006/13)
{2..3}
BOOL aux14 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00004/13)
DISCRETE aux15 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00005/13)
{1..2}
DISCRETE aux17 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00003/13)
{0..2}
DISCRETE aux18 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00007_00002/13)
{0..3}
BOOL aux19 #Active-CSE: 7 occurrences of this expression or equivalent: (M_00004_00001=M_00005_00001)
BOOL aux20 #Active-CSE: 7 occurrences of this expression or equivalent: (M_00002_00006=M_00003_00005)
BOOL aux21 #Active-CSE: 8 occurrences of this expression or equivalent: (M_00002_00002=M_00003_00002)
BOOL aux22 #Active-CSE: 5 occurrences of this expression or equivalent: (M_00004_00003=M_00005_00003)
BOOL aux23 #Active-CSE: 5 occurrences of this expression or equivalent: (M_00004_00005=M_00005_00004)
BOOL aux24 #Active-CSE: 7 occurrences of this expression or equivalent: (M_00004_00006=M_00005_00005)
DISCRETE aux25 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00003/13)
{0..3}
DISCRETE aux26 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00002/13)
{0..3}
DISCRETE aux27 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00004/13)
{0..3}
DISCRETE aux28 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00005/13)
{1..3}
DISCRETE aux29 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00001/13)
{0..3}
BOOL aux30 #Active-CSE: 7 occurrences of this expression or equivalent: (M_00002_00003=M_00003_00003)
BOOL aux31 #Active-CSE: 5 occurrences of this expression or equivalent: (M_00003_00005=M_00004_00004)
BOOL aux32 #Active-CSE: 4 occurrences of this expression or equivalent: (M_00005_00002=M_00006_00002)
BOOL aux33 #Active-CSE: 4 occurrences of this expression or equivalent: (M_00005_00003=M_00006_00003)
DISCRETE aux34 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00006/13)
{2..3}
DISCRETE aux35 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00001/13)
{0..3}
BOOL aux36 #Active-CSE: 7 occurrences of this expression or equivalent: (M_00003_00002=M_00004_00002)
DISCRETE aux37 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00005_00005/13)
{0..3}
DISCRETE aux38 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00005_00001/13)
{0..3}
DISCRETE aux39 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00005_00003/13)
{0..3}
BOOL aux40 #Active-CSE: 5 occurrences of this expression or equivalent: (M_00002_00005=M_00003_00004)
BOOL aux41 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00004=M_00005_00003)
BOOL aux42 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00003=M_00003_00002)
BOOL aux43 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00006=M_00003_00006)
BOOL aux44 #Active-CSE: 6 occurrences of this expression or equivalent: (M_00004_00002=M_00005_00002)
BOOL aux45 #Active-CSE: 4 occurrences of this expression or equivalent: (M_00002_00005=M_00003_00005)
BOOL aux46 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00007_00003=M_00008_00002)
BOOL aux47 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00007_00001=M_00008_00001)
BOOL aux48 #Active-CSE: 7 occurrences of this expression or equivalent: (M_00003_00006=M_00004_00005)
BOOL aux49 #Active-CSE: 5 occurrences of this expression or equivalent: (M_00005_00001=M_00006_00001)
DISCRETE aux50 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00006_00001/13)
{0..3}
DISCRETE aux51 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00006_00002/13)
{0..3}
DISCRETE aux52 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00006_00003/13)
{0..3}
DISCRETE aux53 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00006_00004/13)
{0..3}
DISCRETE aux54 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00002/13)
{0..2}
DISCRETE aux55 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00003/13)
{0..2}
DISCRETE aux56 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00005/13)
{1..3}
BOOL aux57 #Active-CSE: 5 occurrences of this expression or equivalent: (M_00002_00004=M_00003_00004)
BOOL aux58 #Active-CSE: 5 occurrences of this expression or equivalent: (M_00005_00005=M_00006_00004)
BOOL aux59 #Active-CSE: 9 occurrences of this expression or equivalent: (M_00002_00001=M_00003_00001)
BOOL aux60 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00003=M_00004_00002)
BOOL aux61 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00005_00004=M_00006_00004)
BOOL aux62 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00005_00003=M_00006_00002)
DISCRETE aux63 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00005_00002/13)
{0..3}
DISCRETE aux64 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00005_00004/13)
{0..3}
BOOL aux65 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00003=M_00005_00002)
BOOL aux66 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00005=M_00005_00005)
BOOL aux67 #Active-CSE: 9 occurrences of this expression or equivalent: (M_00002_00007=M_00003_00006)
BOOL aux68 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00004=M_00004_00003)
BOOL aux69 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00005=M_00004_00005)
BOOL aux70 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00005_00004=M_00006_00003)
BOOL aux71 #Active-CSE: 4 occurrences of this expression or equivalent: (M_00003_00004=M_00004_00004)
BOOL aux72 #Active-CSE: 6 occurrences of this expression or equivalent: (M_00003_00003=M_00004_00003)
BOOL aux73 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00007_00003=M_00006_00004)
BOOL aux74 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00007_00001=M_00006_00001)
BOOL aux75 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00007_00002=M_00006_00002)
BOOL aux76 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00007_00003=M_00006_00003)
BOOL aux77 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00007_00002=M_00006_00003)
DISCRETE aux78 #Active-CSE: 4 occurrences of this expression or equivalent: (M_00003_00004/13)
{0..2}
BOOL aux79 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00004=M_00003_00003)
BOOL aux80 #Active-CSE: 8 occurrences of this expression or equivalent: (M_00003_00001=M_00004_00001)
DISCRETE aux81 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00001/13)
{0..3}
DISCRETE aux82 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00006/13)
{0..3}
BOOL aux83 #Active-CSE: 4 occurrences of this expression or equivalent: (M_00004_00004=M_00005_00004)
DISCRETE aux84 #
{0..3}
DISCRETE aux85 #( - M_00002_00001 + M_00002_00004)
{-39..10}
**CONSTRAINTS**
w-inintervalset(aux85, [-39,-39,-36,-36,-33,-33,-29,-29,-26,-26,-24,-19,-16,-16,-14,-12,-10,-10,-7,-7,-3,-3,0,0,3,3,7,7,10,10])
**VARIABLES**
DISCRETE aux86 #( - M_00002_00007 + 8)
{-33..-20}
**CONSTRAINTS**
w-inintervalset(aux86, [-33,-33,-23,-23,-21,-20])
**VARIABLES**
DISCRETE aux87 #( - M_00002_00004 + M_00002_00007)
{13..36}
**CONSTRAINTS**
w-inintervalset(aux87, [13,14,16,16,20,21,23,24,26,26,33,33,36,36])
**VARIABLES**
DISCRETE aux88 #( - M_00002_00004 + M_00002_00005)
{10..23}
**CONSTRAINTS**
w-inintervalset(aux88, [10,10,12,13,19,20,22,23])
**VARIABLES**
DISCRETE aux89 #( - M_00002_00005 + M_00002_00006)
{-1..26}
**CONSTRAINTS**
w-inintervalset(aux89, [-1,4,12,14,16,16,26,26])
**VARIABLES**
DISCRETE aux90 #( - M_00002_00006 + M_00002_00007)
{-13..14}
**CONSTRAINTS**
w-inintervalset(aux90, [-13,-12,-10,-10,-3,4,10,10,12,14])
**VARIABLES**
DISCRETE aux91 #( - M_00002_00003 + M_00002_00004)
{-26..10}
**CONSTRAINTS**
w-inintervalset(aux91, [-26,-26,-24,-19,-16,-16,-14,-12,-10,-10,-7,-7,-3,-3,0,0,3,3,7,7,10,10])
**VARIABLES**
DISCRETE aux92 #( - M_00002_00003 + M_00002_00006)
{-4..36}
**CONSTRAINTS**
w-inintervalset(aux92, [-4,4,10,10,12,14,16,16,19,24,26,26,33,33,36,36])
**VARIABLES**
DISCRETE aux93 #( - M_00002_00002 + M_00002_00003)
{-26..2}
**CONSTRAINTS**
w-inintervalset(aux93, [-26,-26,-24,-23,-21,-21,-16,-16,-14,-14,-4,0,2,2])
**VARIABLES**
DISCRETE aux94 #( - M_00002_00002 + M_00002_00005)
{-14..-1}
**CONSTRAINTS**
w-inintervalset(aux94, [-14,-14,-4,-1])
**VARIABLES**
DISCRETE aux95 #( - M_00002_00001 + M_00002_00002)
{-15..24}
**CONSTRAINTS**
w-inintervalset(aux95, [-15,-15,-13,-12,-10,-10,-2,-2,0,4,14,14,16,16,21,21,23,24])
**VARIABLES**
DISCRETE aux96 #( - M_00003_00001 + M_00003_00002)
{-39..26}
**CONSTRAINTS**
w-inintervalset(aux96, [-39,-39,-36,-36,-33,-33,-29,-29,-26,-26,-24,-19,-17,-12,-10,-10,-7,-7,-4,4,7,7,10,10,12,14,16,16,19,24,26,26])
**VARIABLES**
DISCRETE aux97 #( - M_00003_00001 + M_00003_00004)
{-39..23}
**CONSTRAINTS**
w-inintervalset(aux97, [-39,-39,-36,-36,-33,-33,-29,-29,-26,-26,-24,-19,-17,-16,-14,-12,-10,-10,-7,-7,-4,1,3,3,7,7,10,10,12,13,19,20,22,23])
**VARIABLES**
DISCRETE aux98 #( - M_00003_00004 + 8)
{-20..3}
**CONSTRAINTS**
w-inintervalset(aux98, [-20,-19,-7,-7,0,0,3,3])
**VARIABLES**
DISCRETE aux99 #( - M_00003_00003 + M_00003_00004)
{-26..23}
**CONSTRAINTS**
w-inintervalset(aux99, [-26,-26,-24,-19,-16,-16,-14,-12,-10,-10,-7,-7,-4,1,3,3,7,7,10,10,12,13,19,20,22,23])
**VARIABLES**
DISCRETE aux100 #( - M_00003_00004 + M_00003_00005)
{-1..36}
**CONSTRAINTS**
w-inintervalset(aux100, [-1,4,7,7,10,10,12,14,16,16,19,24,26,26,33,33,36,36])
**VARIABLES**
DISCRETE aux101 #( - M_00003_00003 + M_00003_00006)
{-4..36}
**CONSTRAINTS**
w-inintervalset(aux101, [-4,4,10,10,12,14,16,16,19,24,26,26,33,33,36,36])
**VARIABLES**
DISCRETE aux102 #( - M_00003_00005 + M_00003_00006)
{-13..26}
**CONSTRAINTS**
w-inintervalset(aux102, [-13,-12,-10,-10,-4,4,10,10,12,14,16,16,26,26])
**VARIABLES**
DISCRETE aux103 #( - M_00003_00002 + M_00003_00003)
{-26..10}
**CONSTRAINTS**
w-inintervalset(aux103, [-26,-26,-24,-19,-16,-16,-14,-12,-10,-10,-7,-7,-4,4,7,7,10,10])
**VARIABLES**
DISCRETE aux104 #( - M_00003_00002 + M_00003_00005)
{-16..36}
**CONSTRAINTS**
w-inintervalset(aux104, [-16,-16,-14,-12,-4,4,7,7,10,10,12,14,16,16,19,24,26,26,33,33,36,36])
**VARIABLES**
DISCRETE aux105 #( - M_00003_00006 + 8)
{-33..-19}
**CONSTRAINTS**
w-inintervalset(aux105, [-33,-33,-23,-23,-21,-19])
**VARIABLES**
DISCRETE aux106 #( - M_00004_00001 + M_00004_00002)
{-39..36}
**CONSTRAINTS**
w-inintervalset(aux106, [-39,-39,-36,-36,-33,-33,-29,-29,-26,-26,-24,-19,-17,-12,-10,-10,-7,-7,-4,4,7,7,10,10,12,14,16,16,19,24,26,26,33,33,36,36])
**VARIABLES**
DISCRETE aux107 #( - M_00004_00001 + M_00004_00004)
{-39..36}
**CONSTRAINTS**
w-inintervalset(aux107, [-39,-39,-36,-36,-33,-33,-29,-29,-26,-26,-24,-19,-17,-12,-10,-10,-7,-7,-4,4,7,7,10,10,12,14,16,16,19,24,26,26,33,33,36,36])
**VARIABLES**
DISCRETE aux108 #( - M_00004_00006 + -1)
{-42..-9}
**CONSTRAINTS**
w-inintervalset(aux108, [-42,-42,-32,-32,-30,-28,-16,-16,-9,-9])
**VARIABLES**
DISCRETE aux109 #( - M_00004_00004 + M_00004_00005)
{-14..36}
**CONSTRAINTS**
w-inintervalset(aux109, [-14,-12,-10,-10,-4,4,7,7,10,10,12,14,16,16,19,24,26,26,33,33,36,36])
**VARIABLES**
DISCRETE aux110 #( - M_00004_00005 + M_00004_00006)
{-33..26}
**CONSTRAINTS**
w-inintervalset(aux110, [-33,-33,-26,-26,-23,-23,-21,-19,-16,-16,-14,-12,-10,-10,-7,-7,-4,4,10,10,12,14,16,16,26,26])
**VARIABLES**
DISCRETE aux111 #( - M_00004_00003 + M_00004_00004)
{-36..36}
**CONSTRAINTS**
w-inintervalset(aux111, [-36,-36,-33,-33,-26,-26,-24,-19,-16,-16,-14,-12,-10,-10,-7,-7,-4,4,7,7,10,10,12,14,16,16,19,24,26,26,33,33,36,36])
**VARIABLES**
DISCRETE aux112 #( - M_00004_00003 + M_00004_00006)
{-33..36}
**CONSTRAINTS**
w-inintervalset(aux112, [-33,-33,-26,-26,-23,-23,-21,-19,-16,-16,-14,-12,-10,-10,-7,-7,-4,4,7,7,10,10,12,14,16,16,19,24,26,26,33,33,36,36])
**VARIABLES**
DISCRETE aux113 #( - M_00004_00002 + M_00004_00003)
{-36..36}
**CONSTRAINTS**
w-inintervalset(aux113, [-36,-36,-33,-33,-26,-26,-24,-19,-16,-16,-14,-12,-10,-10,-7,-7,-4,4,7,7,10,10,12,14,16,16,19,24,26,26,33,33,36,36])
**VARIABLES**
DISCRETE aux114 #( - M_00004_00002 + M_00004_00005)
{-16..36}
**CONSTRAINTS**
w-inintervalset(aux114, [-16,-16,-14,-12,-10,-10,-4,4,7,7,10,10,12,14,16,16,19,24,26,26,33,33,36,36])
**VARIABLES**
DISCRETE aux115 #(-1 - M_00005_00005)
{-42..-9}
**CONSTRAINTS**
w-inintervalset(aux115, [-42,-42,-32,-32,-30,-28,-16,-16,-9,-9])
**VARIABLES**
DISCRETE aux116 #( - M_00005_00002 + M_00005_00003)
{-36..36}
**CONSTRAINTS**
w-inintervalset(aux116, [-36,-36,-33,-33,-26,-26,-24,-19,-16,-16,-14,-12,-10,-10,-7,-7,-4,4,7,7,10,10,12,14,16,16,19,24,26,26,33,33,36,36])
**VARIABLES**
DISCRETE aux117 #( - M_00005_00003 + M_00005_00004)
{-36..36}
**CONSTRAINTS**
w-inintervalset(aux117, [-36,-36,-33,-33,-26,-26,-24,-19,-16,-16,-14,-12,-10,-10,-7,-7,-4,4,7,7,10,10,12,14,16,16,19,24,26,26,33,33,36,36])
**VARIABLES**
DISCRETE aux118 #( - M_00005_00002 + M_00005_00005)
{-33..36}
**CONSTRAINTS**
w-inintervalset(aux118, [-33,-33,-26,-26,-23,-23,-21,-19,-16,-16,-14,-12,-10,-10,-7,-7,-4,4,7,7,10,10,12,14,16,16,19,24,26,26,33,33,36,36])
**VARIABLES**
DISCRETE aux119 #( - M_00005_00004 + M_00005_00005)
{-33..36}
**CONSTRAINTS**
w-inintervalset(aux119, [-33,-33,-26,-26,-23,-23,-21,-19,-16,-16,-14,-12,-10,-10,-7,-7,-4,4,7,7,10,10,12,14,16,16,19,24,26,26,33,33,36,36])
**VARIABLES**
DISCRETE aux120 #( - M_00005_00001 + M_00005_00002)
{-39..36}
**CONSTRAINTS**
w-inintervalset(aux120, [-39,-39,-36,-36,-33,-33,-29,-29,-26,-26,-24,-19,-17,-12,-10,-10,-7,-7,-4,4,7,7,10,10,12,14,16,16,19,24,26,26,33,33,36,36])
**VARIABLES**
DISCRETE aux121 #( - M_00005_00001 + M_00005_00004)
{-39..36}
**CONSTRAINTS**
w-inintervalset(aux121, [-39,-39,-36,-36,-33,-33,-29,-29,-26,-26,-24,-19,-17,-12,-10,-10,-7,-7,-4,4,7,7,10,10,12,14,16,16,19,24,26,26,33,33,36,36])
**VARIABLES**
DISCRETE aux122 #( - M_00006_00001 + M_00006_00002)
{-39..36}
**CONSTRAINTS**
w-inintervalset(aux122, [-39,-39,-36,-36,-33,-33,-29,-29,-26,-26,-24,-19,-17,-12,-10,-10,-7,-7,-4,4,7,7,10,10,12,14,16,16,19,24,26,26,33,33,36,36])
**VARIABLES**
DISCRETE aux123 #( - M_00006_00002 + M_00006_00003)
{-36..36}
**CONSTRAINTS**
w-inintervalset(aux123, [-36,-36,-33,-33,-26,-26,-24,-19,-16,-16,-14,-12,-10,-10,-7,-7,-4,4,7,7,10,10,12,14,16,16,19,24,26,26,33,33,36,36])
**VARIABLES**
DISCRETE aux124 #( - M_00006_00001 + M_00006_00004)
{-39..36}
**CONSTRAINTS**
w-inintervalset(aux124, [-39,-39,-36,-36,-33,-33,-29,-29,-26,-26,-24,-19,-17,-12,-10,-10,-7,-7,-4,4,7,7,10,10,12,14,16,16,19,24,26,26,33,33,36,36])
**VARIABLES**
DISCRETE aux125 #( - M_00006_00003 + M_00006_00004)
{-36..36}
**CONSTRAINTS**
w-inintervalset(aux125, [-36,-36,-33,-33,-26,-26,-24,-19,-16,-16,-14,-12,-10,-10,-7,-7,-4,4,7,7,10,10,12,14,16,16,19,24,26,26,33,33,36,36])
**VARIABLES**
DISCRETE aux126 #(-1 - M_00006_00004)
{-42..-6}
**CONSTRAINTS**
w-inintervalset(aux126, [-42,-42,-32,-32,-30,-28,-16,-16,-9,-9,-6,-6])
**VARIABLES**
DISCRETE aux127 #( - M_00007_00002 + M_00007_00003)
{-26..26}
**CONSTRAINTS**
w-inintervalset(aux127, [-26,-26,-24,-19,-16,-16,-14,-12,-10,-10,-7,-7,-4,4,7,7,10,10,12,14,16,16,19,24,26,26])
**VARIABLES**
DISCRETE aux128 #( - M_00007_00001 + M_00007_00002)
{-39..36}
**CONSTRAINTS**
w-inintervalset(aux128, [-39,-39,-36,-36,-33,-33,-29,-29,-26,-26,-24,-19,-17,-12,-10,-10,-7,-7,-4,4,7,7,10,10,12,14,16,16,19,24,26,26,33,33,36,36])
**VARIABLES**
DISCRETE aux129 #( - M_00007_00003 + -1)
{-42..-6}
**CONSTRAINTS**
w-inintervalset(aux129, [-42,-42,-32,-32,-30,-28,-16,-16,-9,-9,-6,-6])
**VARIABLES**
DISCRETE aux130 #( - M_00008_00001 + M_00008_00002)
{-39..26}
**CONSTRAINTS**
w-inintervalset(aux130, [-39,-39,-36,-36,-33,-33,-29,-29,-26,-26,-24,-19,-17,-12,-10,-10,-7,-7,-4,4,7,7,10,10,12,14,16,16,19,24,26,26])
**VARIABLES**
DISCRETE aux131 #( - M_00008_00002 + -1)
{-42..-6}
**CONSTRAINTS**
w-inintervalset(aux131, [-42,-42,-32,-32,-30,-28,-16,-16,-9,-9,-6,-6])
**VARIABLES**
**VARIABLES**
ALIAS cards[9]=[44, 29, 31, 5, 15, 27, 41, 28, 8]
**SEARCH**
PRINT[[M_00002_00001],[M_00002_00002],[M_00002_00003],[M_00002_00004],[M_00002_00005],[M_00002_00006],[M_00002_00007],[M_00003_00001],[M_00003_00002],[M_00003_00003],[M_00003_00004],[M_00003_00005],[M_00003_00006],[M_00004_00001],[M_00004_00002],[M_00004_00003],[M_00004_00004],[M_00004_00005],[M_00004_00006],[M_00005_00001],[M_00005_00002],[M_00005_00003],[M_00005_00004],[M_00005_00005],[M_00006_00001],[M_00006_00002],[M_00006_00003],[M_00006_00004],[M_00007_00001],[M_00007_00002],[M_00007_00003],[M_00008_00001],[M_00008_00002],[M_00009_00001]]
VARORDER STATIC [M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, M_00002_00006, M_00002_00007, M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005, M_00003_00006, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, M_00004_00006, M_00005_00001, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005, M_00006_00001, M_00006_00002, M_00006_00003, M_00006_00004, M_00007_00001, M_00007_00002, M_00007_00003, M_00008_00001, M_00008_00002, M_00009_00001]
**CONSTRAINTS**
div(M_00008_00002, 13, aux84)
div(M_00002_00006, 13, aux13)
div(M_00002_00004, 13, aux14)
div(M_00002_00005, 13, aux15)
div(M_00002_00002, 13, 2)
div(M_00002_00003, 13, aux17)
div(M_00007_00002, 13, aux18)
reify(gaceq(M_00004_00001,M_00005_00001), aux19)
reify(gaceq(M_00002_00006,M_00003_00005), aux20)
reify(gaceq(M_00002_00002,M_00003_00002), aux21)
reify(gaceq(M_00004_00003,M_00005_00003), aux22)
reify(gaceq(M_00004_00005,M_00005_00004), aux23)
reify(gaceq(M_00004_00006,M_00005_00005), aux24)
div(M_00004_00003, 13, aux25)
div(M_00004_00002, 13, aux26)
div(M_00004_00004, 13, aux27)
div(M_00004_00005, 13, aux28)
div(M_00002_00001, 13, aux29)
reify(gaceq(M_00002_00003,M_00003_00003), aux30)
reify(gaceq(M_00003_00005,M_00004_00004), aux31)
reify(gaceq(M_00005_00002,M_00006_00002), aux32)
reify(gaceq(M_00005_00003,M_00006_00003), aux33)
div(M_00003_00006, 13, aux34)
div(M_00003_00001, 13, aux35)
reify(gaceq(M_00003_00002,M_00004_00002), aux36)
div(M_00005_00005, 13, aux37)
div(M_00005_00001, 13, aux38)
div(M_00005_00003, 13, aux39)
reify(gaceq(M_00002_00005,M_00003_00004), aux40)
reify(gaceq(M_00004_00004,M_00005_00003), aux41)
reify(gaceq(M_00002_00003,M_00003_00002), aux42)
reify(gaceq(M_00002_00006,M_00003_00006), aux43)
reify(gaceq(M_00004_00002,M_00005_00002), aux44)
reify(gaceq(M_00002_00005,M_00003_00005), aux45)
reify(gaceq(M_00007_00003,M_00008_00002), aux46)
reify(gaceq(M_00007_00001,M_00008_00001), aux47)
reify(gaceq(M_00003_00006,M_00004_00005), aux48)
reify(gaceq(M_00005_00001,M_00006_00001), aux49)
div(M_00006_00001, 13, aux50)
div(M_00006_00002, 13, aux51)
div(M_00006_00003, 13, aux52)
div(M_00006_00004, 13, aux53)
div(M_00003_00002, 13, aux54)
div(M_00003_00003, 13, aux55)
div(M_00003_00005, 13, aux56)
reify(gaceq(M_00002_00004,M_00003_00004), aux57)
reify(gaceq(M_00005_00005,M_00006_00004), aux58)
reify(gaceq(M_00002_00001,M_00003_00001), aux59)
reify(gaceq(M_00003_00003,M_00004_00002), aux60)
reify(gaceq(M_00005_00004,M_00006_00004), aux61)
reify(gaceq(M_00005_00003,M_00006_00002), aux62)
div(M_00005_00002, 13, aux63)
div(M_00005_00004, 13, aux64)
reify(gaceq(M_00004_00003,M_00005_00002), aux65)
reify(gaceq(M_00004_00005,M_00005_00005), aux66)
reify(gaceq(M_00002_00007,M_00003_00006), aux67)
reify(gaceq(M_00003_00004,M_00004_00003), aux68)
reify(gaceq(M_00003_00005,M_00004_00005), aux69)
reify(gaceq(M_00005_00004,M_00006_00003), aux70)
reify(gaceq(M_00003_00004,M_00004_00004), aux71)
reify(gaceq(M_00003_00003,M_00004_00003), aux72)
reify(gaceq(M_00007_00003,M_00006_00004), aux73)
reify(gaceq(M_00007_00001,M_00006_00001), aux74)
reify(gaceq(M_00007_00002,M_00006_00002), aux75)
reify(gaceq(M_00007_00003,M_00006_00003), aux76)
reify(gaceq(M_00007_00002,M_00006_00003), aux77)
div(M_00003_00004, 13, aux78)
reify(gaceq(M_00002_00004,M_00003_00003), aux79)
reify(gaceq(M_00003_00001,M_00004_00001), aux80)
div(M_00004_00001, 13, aux81)
div(M_00004_00006, 13, aux82)
reify(gaceq(M_00004_00004,M_00005_00004), aux83)
gccweak([M_00002_00001, M_00002_00002, M_00002_00003, M_00002_00004, M_00002_00005, M_00002_00006, M_00002_00007],[-1],[0])
gccweak([M_00003_00001, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005, M_00003_00006],[-1],[0])
gccweak([M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, M_00004_00006],[-1],[0])
gccweak([M_00005_00001, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005],[-1],[0])
gccweak([M_00006_00001, M_00006_00002, M_00006_00003, M_00006_00004],[-1],[0])
gccweak([M_00007_00001, M_00007_00002, M_00007_00003],[-1],[0])
gccweak([M_00008_00001, M_00008_00002],[-1],[0])
gccweak([M_00009_00001],[-1],[0])
watched-or({watched-and({w-literal(M_00002_00001,5),w-literal(M_00002_00002,29),w-literal(M_00002_00003,31),w-literal(M_00002_00004,15),w-literal(M_00002_00005,27),w-literal(M_00002_00006,41),w-literal(M_00002_00007,28)}),watched-and({w-literal(M_00002_00001,44),w-literal(M_00002_00002,29),w-literal(M_00002_00003,5),w-literal(M_00002_00004,15),w-literal(M_00002_00005,27),w-literal(M_00002_00006,41),w-literal(M_00002_00007,28)}),watched-and({w-literal(M_00002_00001,44),w-literal(M_00002_00002,29),w-literal(M_00002_00003,27),w-literal(M_00002_00004,5),w-literal(M_00002_00005,15),w-literal(M_00002_00006,41),w-literal(M_00002_00007,28)}),watched-and({w-literal(M_00002_00001,44),w-literal(M_00002_00002,29),w-literal(M_00002_00003,31),w-literal(M_00002_00004,5),w-literal(M_00002_00005,15),w-literal(M_00002_00006,27),w-literal(M_00002_00007,28)}),watched-and({w-literal(M_00002_00001,44),w-literal(M_00002_00002,29),w-literal(M_00002_00003,31),w-literal(M_00002_00004,5),w-literal(M_00002_00005,28),w-literal(M_00002_00006,27),w-literal(M_00002_00007,41)}),watched-and({w-literal(M_00002_00001,44),w-literal(M_00002_00002,31),w-literal(M_00002_00003,5),w-literal(M_00002_00004,15),w-literal(M_00002_00005,27),w-literal(M_00002_00006,41),w-literal(M_00002_00007,28)})})
watched-or({watched-and({w-literal(aux21,1),w-literal(aux30,1),gaceq(M_00002_00004,M_00003_00001),w-literal(aux40,1),w-literal(aux20,1),w-literal(aux67,1),watched-or({modulo(aux85,13,0),gaceq(aux29,aux14)})}),watched-and({modulo(aux86,13,0),w-literal(aux59,1),w-literal(aux21,1),w-literal(aux30,1),w-literal(aux57,1),w-literal(aux45,1),w-literal(aux43,1)}),watched-and({w-literal(aux59,1),w-literal(aux21,1),w-literal(aux30,1),w-literal(aux45,1),w-literal(aux43,1),gaceq(M_00002_00007,M_00003_00004),modulo(aux87,13,0)}),watched-and({w-literal(aux59,1),w-literal(aux21,1),w-literal(aux30,1),w-literal(aux40,1),w-literal(aux20,1),w-literal(aux67,1),watched-or({modulo(aux88,13,0),gaceq(aux14,aux15)})}),watched-and({w-literal(aux59,1),w-literal(aux21,1),w-literal(aux30,1),w-literal(aux57,1),w-literal(aux20,1),w-literal(aux67,1),watched-or({modulo(aux89,13,0),gaceq(aux15,aux13)})}),watched-and({w-literal(aux59,1),w-literal(aux21,1),w-literal(aux30,1),w-literal(aux57,1),w-literal(aux45,1),w-literal(aux67,1),watched-or({modulo(aux90,13,0),div(M_00002_00007, 13, aux13)})}),watched-and({w-literal(aux59,1),w-literal(aux21,1),w-literal(aux79,1),w-literal(aux40,1),w-literal(aux20,1),w-literal(aux67,1),watched-or({modulo(aux91,13,0),gaceq(aux17,aux14)})}),watched-and({w-literal(aux59,1),w-literal(aux21,1),w-literal(aux57,1),w-literal(aux45,1),gaceq(M_00002_00006,M_00003_00003),w-literal(aux67,1),watched-or({modulo(aux92,13,0),gaceq(aux17,aux13)})}),watched-and({w-literal(aux59,1),w-literal(aux42,1),w-literal(aux79,1),w-literal(aux40,1),w-literal(aux20,1),w-literal(aux67,1),watched-or({modulo(aux93,13,0),w-literal(aux17,2)})}),watched-and({w-literal(aux59,1),w-literal(aux30,1),w-literal(aux57,1),gaceq(M_00002_00005,M_00003_00002),w-literal(aux20,1),w-literal(aux67,1),watched-or({modulo(aux94,13,0),w-literal(aux15,2)})}),watched-and({gaceq(M_00002_00002,M_00003_00001),w-literal(aux42,1),w-literal(aux79,1),w-literal(aux40,1),w-literal(aux20,1),w-literal(aux67,1),watched-or({modulo(aux95,13,0),w-literal(aux29,2)})})})
watched-or({watched-and({gaceq(M_00003_00002,M_00004_00001),w-literal(aux60,1),w-literal(aux68,1),w-literal(aux31,1),w-literal(aux48,1),watched-or({modulo(aux96,13,0),gaceq(aux35,aux54)}),w-literal(M_00004_00006,8)}),watched-and({w-literal(aux36,1),w-literal(aux72,1),gaceq(M_00003_00004,M_00004_00001),w-literal(aux31,1),w-literal(aux48,1),watched-or({modulo(aux97,13,0),gaceq(aux35,aux78)}),w-literal(M_00004_00006,8)}),watched-and({watched-or({modulo(aux98,13,0),w-literal(aux78,0)}),w-literal(aux80,1),w-literal(aux36,1),w-literal(aux72,1),w-literal(aux69,1),gaceq(M_00003_00006,M_00004_00006),w-literal(M_00004_00004,8)}),watched-and({w-literal(aux80,1),w-literal(aux36,1),w-literal(aux68,1),w-literal(aux31,1),w-literal(aux48,1),watched-or({modulo(aux99,13,0),gaceq(aux55,aux78)}),w-literal(M_00004_00006,8)}),watched-and({w-literal(aux80,1),w-literal(aux36,1),w-literal(aux72,1),w-literal(aux31,1),w-literal(aux48,1),watched-or({modulo(aux100,13,0),gaceq(aux78,aux56)}),w-literal(M_00004_00006,8)}),watched-and({w-literal(aux80,1),w-literal(aux36,1),w-literal(aux71,1),w-literal(aux69,1),gaceq(M_00003_00006,M_00004_00003),watched-or({modulo(aux101,13,0),gaceq(aux55,aux34)}),w-literal(M_00004_00006,8)}),watched-and({w-literal(aux80,1),w-literal(aux36,1),w-literal(aux72,1),w-literal(aux71,1),w-literal(aux48,1),watched-or({modulo(aux102,13,0),gaceq(aux56,aux34)}),w-literal(M_00004_00006,8)}),watched-and({w-literal(aux80,1),w-literal(aux60,1),w-literal(aux68,1),w-literal(aux31,1),w-literal(aux48,1),watched-or({modulo(aux103,13,0),gaceq(aux54,aux55)}),w-literal(M_00004_00006,8)}),watched-and({w-literal(aux80,1),w-literal(aux72,1),w-literal(aux71,1),gaceq(M_00003_00005,M_00004_00002),w-literal(aux48,1),watched-or({modulo(aux104,13,0),gaceq(aux54,aux56)}),w-literal(M_00004_00006,8)}),watched-and({w-literal(aux80,1),w-literal(aux36,1),w-literal(aux72,1),w-literal(aux71,1),w-literal(aux69,1),modulo(aux105,13,0),w-literal(M_00004_00006,8)})})
watched-or({watched-and({gaceq(M_00004_00002,M_00005_00001),w-literal(aux65,1),w-literal(aux41,1),w-literal(aux23,1),w-literal(aux24,1),watched-or({gaceq(aux81,aux26),modulo(aux106,13,0)})}),watched-and({w-literal(aux44,1),w-literal(aux22,1),gaceq(M_00004_00004,M_00005_00001),w-literal(aux23,1),w-literal(aux24,1),watched-or({gaceq(aux81,aux27),modulo(aux107,13,0)})}),watched-and({modulo(aux108,13,0),w-literal(aux19,1),w-literal(aux44,1),w-literal(aux22,1),w-literal(aux83,1),w-literal(aux66,1)}),watched-and({w-literal(aux19,1),w-literal(aux44,1),w-literal(aux22,1),w-literal(aux23,1),w-literal(aux24,1),watched-or({gaceq(aux27,aux28),modulo(aux109,13,0)})}),watched-and({w-literal(aux19,1),w-literal(aux44,1),w-literal(aux22,1),w-literal(aux83,1),w-literal(aux24,1),watched-or({gaceq(aux28,aux82),modulo(aux110,13,0)})}),watched-and({w-literal(aux19,1),w-literal(aux44,1),w-literal(aux41,1),w-literal(aux23,1),w-literal(aux24,1),watched-or({gaceq(aux25,aux27),modulo(aux111,13,0)})}),watched-and({w-literal(aux19,1),w-literal(aux44,1),w-literal(aux83,1),w-literal(aux66,1),gaceq(M_00004_00006,M_00005_00003),watched-or({gaceq(aux25,aux82),modulo(aux112,13,0)})}),watched-and({w-literal(aux19,1),w-literal(aux65,1),w-literal(aux41,1),w-literal(aux23,1),w-literal(aux24,1),watched-or({gaceq(aux26,aux25),modulo(aux113,13,0)})}),watched-and({w-literal(aux19,1),w-literal(aux22,1),w-literal(aux83,1),gaceq(M_00004_00005,M_00005_00002),w-literal(aux24,1),watched-or({gaceq(aux26,aux28),modulo(aux114,13,0)})})})
watched-or({watched-and({w-literal(aux49,1),w-literal(aux32,1),w-literal(aux33,1),w-literal(aux61,1),modulo(aux115,13,0)}),watched-and({w-literal(aux49,1),w-literal(aux62,1),w-literal(aux70,1),w-literal(aux58,1),watched-or({modulo(aux116,13,0),gaceq(aux63,aux39)})}),watched-and({w-literal(aux49,1),w-literal(aux32,1),w-literal(aux70,1),w-literal(aux58,1),watched-or({modulo(aux117,13,0),gaceq(aux39,aux64)})}),watched-and({w-literal(aux49,1),w-literal(aux33,1),w-literal(aux61,1),gaceq(M_00005_00005,M_00006_00002),watched-or({modulo(aux118,13,0),gaceq(aux63,aux37)})}),watched-and({w-literal(aux49,1),w-literal(aux32,1),w-literal(aux33,1),w-literal(aux58,1),watched-or({modulo(aux119,13,0),gaceq(aux64,aux37)})}),watched-and({gaceq(M_00005_00002,M_00006_00001),w-literal(aux62,1),w-literal(aux70,1),w-literal(aux58,1),watched-or({modulo(aux120,13,0),gaceq(aux38,aux63)})}),watched-and({w-literal(aux32,1),w-literal(aux33,1),gaceq(M_00005_00004,M_00006_00001),w-literal(aux58,1),watched-or({modulo(aux121,13,0),gaceq(aux38,aux64)})})})
watched-or({watched-and({gaceq(M_00007_00001,M_00006_00002),w-literal(aux77,1),w-literal(aux73,1),watched-or({gaceq(aux50,aux51),modulo(aux122,13,0)})}),watched-and({w-literal(aux74,1),w-literal(aux77,1),w-literal(aux73,1),watched-or({gaceq(aux51,aux52),modulo(aux123,13,0)})}),watched-and({gaceq(M_00007_00001,M_00006_00004),w-literal(aux75,1),w-literal(aux76,1),watched-or({gaceq(aux50,aux53),modulo(aux124,13,0)})}),watched-and({w-literal(aux74,1),w-literal(aux75,1),w-literal(aux73,1),watched-or({gaceq(aux52,aux53),modulo(aux125,13,0)})}),watched-and({w-literal(aux74,1),w-literal(aux75,1),w-literal(aux76,1),modulo(aux126,13,0)})})
watched-or({watched-and({watched-or({modulo(aux127,13,0),div(M_00007_00003, 13, aux18)}),w-literal(aux47,1),w-literal(aux46,1)}),watched-and({watched-or({modulo(aux128,13,0),div(M_00007_00001, 13, aux18)}),gaceq(M_00007_00002,M_00008_00001),w-literal(aux46,1)}),watched-and({modulo(aux129,13,0),w-literal(aux47,1),gaceq(M_00007_00002,M_00008_00002)})})
watched-or({watched-and({watched-or({div(M_00008_00001, 13, aux84),modulo(aux130,13,0)}),gaceq(M_00008_00002,M_00009_00001)}),watched-and({gaceq(M_00008_00001,M_00009_00001),modulo(aux131,13,0)})})
weightedsumleq([-1,1],[M_00002_00001,M_00002_00004],aux85)
weightedsumgeq([-1,1],[M_00002_00001,M_00002_00004],aux85)
weightedsumleq([-1,1],[M_00002_00007,8],aux86)
weightedsumgeq([-1,1],[M_00002_00007,8],aux86)
weightedsumleq([-1,1],[M_00002_00004,M_00002_00007],aux87)
weightedsumgeq([-1,1],[M_00002_00004,M_00002_00007],aux87)
weightedsumleq([-1,1],[M_00002_00004,M_00002_00005],aux88)
weightedsumgeq([-1,1],[M_00002_00004,M_00002_00005],aux88)
weightedsumleq([-1,1],[M_00002_00005,M_00002_00006],aux89)
weightedsumgeq([-1,1],[M_00002_00005,M_00002_00006],aux89)
weightedsumleq([-1,1],[M_00002_00006,M_00002_00007],aux90)
weightedsumgeq([-1,1],[M_00002_00006,M_00002_00007],aux90)
weightedsumleq([-1,1],[M_00002_00003,M_00002_00004],aux91)
weightedsumgeq([-1,1],[M_00002_00003,M_00002_00004],aux91)
weightedsumleq([-1,1],[M_00002_00003,M_00002_00006],aux92)
weightedsumgeq([-1,1],[M_00002_00003,M_00002_00006],aux92)
weightedsumleq([-1,1],[M_00002_00002,M_00002_00003],aux93)
weightedsumgeq([-1,1],[M_00002_00002,M_00002_00003],aux93)
weightedsumleq([-1,1],[M_00002_00002,M_00002_00005],aux94)
weightedsumgeq([-1,1],[M_00002_00002,M_00002_00005],aux94)
weightedsumleq([-1,1],[M_00002_00001,M_00002_00002],aux95)
weightedsumgeq([-1,1],[M_00002_00001,M_00002_00002],aux95)
weightedsumleq([-1,1],[M_00003_00001,M_00003_00002],aux96)
weightedsumgeq([-1,1],[M_00003_00001,M_00003_00002],aux96)
weightedsumleq([-1,1],[M_00003_00001,M_00003_00004],aux97)
weightedsumgeq([-1,1],[M_00003_00001,M_00003_00004],aux97)
weightedsumleq([-1,1],[M_00003_00004,8],aux98)
weightedsumgeq([-1,1],[M_00003_00004,8],aux98)
weightedsumleq([-1,1],[M_00003_00003,M_00003_00004],aux99)
weightedsumgeq([-1,1],[M_00003_00003,M_00003_00004],aux99)
weightedsumleq([-1,1],[M_00003_00004,M_00003_00005],aux100)
weightedsumgeq([-1,1],[M_00003_00004,M_00003_00005],aux100)
weightedsumleq([-1,1],[M_00003_00003,M_00003_00006],aux101)
weightedsumgeq([-1,1],[M_00003_00003,M_00003_00006],aux101)
weightedsumleq([-1,1],[M_00003_00005,M_00003_00006],aux102)
weightedsumgeq([-1,1],[M_00003_00005,M_00003_00006],aux102)
weightedsumleq([-1,1],[M_00003_00002,M_00003_00003],aux103)
weightedsumgeq([-1,1],[M_00003_00002,M_00003_00003],aux103)
weightedsumleq([-1,1],[M_00003_00002,M_00003_00005],aux104)
weightedsumgeq([-1,1],[M_00003_00002,M_00003_00005],aux104)
weightedsumleq([-1,1],[M_00003_00006,8],aux105)
weightedsumgeq([-1,1],[M_00003_00006,8],aux105)
weightedsumleq([-1,1],[M_00004_00001,M_00004_00002],aux106)
weightedsumgeq([-1,1],[M_00004_00001,M_00004_00002],aux106)
weightedsumleq([-1,1],[M_00004_00001,M_00004_00004],aux107)
weightedsumgeq([-1,1],[M_00004_00001,M_00004_00004],aux107)
weightedsumleq([-1,1],[M_00004_00006,-1],aux108)
weightedsumgeq([-1,1],[M_00004_00006,-1],aux108)
weightedsumleq([-1,1],[M_00004_00004,M_00004_00005],aux109)
weightedsumgeq([-1,1],[M_00004_00004,M_00004_00005],aux109)
weightedsumleq([-1,1],[M_00004_00005,M_00004_00006],aux110)
weightedsumgeq([-1,1],[M_00004_00005,M_00004_00006],aux110)
weightedsumleq([-1,1],[M_00004_00003,M_00004_00004],aux111)
weightedsumgeq([-1,1],[M_00004_00003,M_00004_00004],aux111)
weightedsumleq([-1,1],[M_00004_00003,M_00004_00006],aux112)
weightedsumgeq([-1,1],[M_00004_00003,M_00004_00006],aux112)
weightedsumleq([-1,1],[M_00004_00002,M_00004_00003],aux113)
weightedsumgeq([-1,1],[M_00004_00002,M_00004_00003],aux113)
weightedsumleq([-1,1],[M_00004_00002,M_00004_00005],aux114)
weightedsumgeq([-1,1],[M_00004_00002,M_00004_00005],aux114)
weightedsumleq([1,-1],[-1,M_00005_00005],aux115)
weightedsumgeq([1,-1],[-1,M_00005_00005],aux115)
weightedsumleq([-1,1],[M_00005_00002,M_00005_00003],aux116)
weightedsumgeq([-1,1],[M_00005_00002,M_00005_00003],aux116)
weightedsumleq([-1,1],[M_00005_00003,M_00005_00004],aux117)
weightedsumgeq([-1,1],[M_00005_00003,M_00005_00004],aux117)
weightedsumleq([-1,1],[M_00005_00002,M_00005_00005],aux118)
weightedsumgeq([-1,1],[M_00005_00002,M_00005_00005],aux118)
weightedsumleq([-1,1],[M_00005_00004,M_00005_00005],aux119)
weightedsumgeq([-1,1],[M_00005_00004,M_00005_00005],aux119)
weightedsumleq([-1,1],[M_00005_00001,M_00005_00002],aux120)
weightedsumgeq([-1,1],[M_00005_00001,M_00005_00002],aux120)
weightedsumleq([-1,1],[M_00005_00001,M_00005_00004],aux121)
weightedsumgeq([-1,1],[M_00005_00001,M_00005_00004],aux121)
weightedsumleq([-1,1],[M_00006_00001,M_00006_00002],aux122)
weightedsumgeq([-1,1],[M_00006_00001,M_00006_00002],aux122)
weightedsumleq([-1,1],[M_00006_00002,M_00006_00003],aux123)
weightedsumgeq([-1,1],[M_00006_00002,M_00006_00003],aux123)
weightedsumleq([-1,1],[M_00006_00001,M_00006_00004],aux124)
weightedsumgeq([-1,1],[M_00006_00001,M_00006_00004],aux124)
weightedsumleq([-1,1],[M_00006_00003,M_00006_00004],aux125)
weightedsumgeq([-1,1],[M_00006_00003,M_00006_00004],aux125)
weightedsumleq([1,-1],[-1,M_00006_00004],aux126)
weightedsumgeq([1,-1],[-1,M_00006_00004],aux126)
weightedsumleq([-1,1],[M_00007_00002,M_00007_00003],aux127)
weightedsumgeq([-1,1],[M_00007_00002,M_00007_00003],aux127)
weightedsumleq([-1,1],[M_00007_00001,M_00007_00002],aux128)
weightedsumgeq([-1,1],[M_00007_00001,M_00007_00002],aux128)
weightedsumleq([-1,1],[M_00007_00003,-1],aux129)
weightedsumgeq([-1,1],[M_00007_00003,-1],aux129)
weightedsumleq([-1,1],[M_00008_00001,M_00008_00002],aux130)
weightedsumgeq([-1,1],[M_00008_00001,M_00008_00002],aux130)
weightedsumleq([-1,1],[M_00008_00002,-1],aux131)
weightedsumgeq([-1,1],[M_00008_00002,-1],aux131)
**EOF**
