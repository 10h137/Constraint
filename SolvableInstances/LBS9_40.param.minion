MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 62
# CSE_active_eliminated_expressions = 213
# CSE_active_total_size = 186
**VARIABLES**
DISCRETE M_00002_00002 #
{11..12}
DISCRETE M_00002_00005 #
{6..12}
**CONSTRAINTS**
w-inintervalset(M_00002_00005, [6,6,8,8,11,12])
**VARIABLES**
DISCRETE M_00002_00006 #
{8..47}
**CONSTRAINTS**
w-inintervalset(M_00002_00006, [8,8,11,13,24,24,26,26,39,39,47,47])
**VARIABLES**
DISCRETE M_00002_00007 #
{13..47}
**CONSTRAINTS**
w-inintervalset(M_00002_00007, [13,13,24,24,26,26,39,39,47,47])
**VARIABLES**
DISCRETE M_00002_00008 #
{8..13}
**CONSTRAINTS**
w-inintervalset(M_00002_00008, [8,8,11,13])
**VARIABLES**
DISCRETE M_00003_00002 #
{6..12}
**CONSTRAINTS**
w-inintervalset(M_00003_00002, [6,6,8,8,11,12])
**VARIABLES**
DISCRETE M_00003_00003 #
{39..47}
**CONSTRAINTS**
w-inintervalset(M_00003_00003, [39,39,47,47])
**VARIABLES**
DISCRETE M_00003_00004 #
{13..24}
**CONSTRAINTS**
w-inintervalset(M_00003_00004, [13,13,24,24])
**VARIABLES**
DISCRETE M_00003_00005 #
{6..47}
**CONSTRAINTS**
w-inintervalset(M_00003_00005, [6,6,8,8,11,13,24,24,26,26,39,39,47,47])
**VARIABLES**
DISCRETE M_00003_00006 #
{8..47}
**CONSTRAINTS**
w-inintervalset(M_00003_00006, [8,8,11,13,24,24,26,26,39,39,47,47])
**VARIABLES**
DISCRETE M_00003_00007 #
{8..47}
**CONSTRAINTS**
w-inintervalset(M_00003_00007, [8,8,11,13,24,24,26,26,39,39,47,47])
**VARIABLES**
DISCRETE M_00004_00001 #
{13..26}
**CONSTRAINTS**
w-inintervalset(M_00004_00001, [13,13,24,24,26,26])
**VARIABLES**
DISCRETE M_00004_00002 #
{6..24}
**CONSTRAINTS**
w-inintervalset(M_00004_00002, [6,6,8,8,11,13,24,24])
**VARIABLES**
DISCRETE M_00004_00003 #
{13..47}
**CONSTRAINTS**
w-inintervalset(M_00004_00003, [13,13,24,24,26,26,39,39,47,47])
**VARIABLES**
DISCRETE M_00004_00004 #
{6..47}
**CONSTRAINTS**
w-inintervalset(M_00004_00004, [6,6,8,8,11,13,24,24,26,26,39,39,47,47])
**VARIABLES**
DISCRETE M_00004_00005 #
{6..47}
**CONSTRAINTS**
w-inintervalset(M_00004_00005, [6,6,8,8,11,13,24,24,26,26,39,39,47,47])
**VARIABLES**
DISCRETE M_00004_00006 #
{8..47}
**CONSTRAINTS**
w-inintervalset(M_00004_00006, [8,8,11,13,24,24,26,26,39,39,47,47])
**VARIABLES**
DISCRETE M_00005_00001 #
{6..39}
**CONSTRAINTS**
w-inintervalset(M_00005_00001, [6,6,8,8,11,13,24,24,26,26,39,39])
**VARIABLES**
DISCRETE M_00005_00002 #
{6..47}
**CONSTRAINTS**
w-inintervalset(M_00005_00002, [6,6,8,8,11,13,24,24,26,26,39,39,47,47])
**VARIABLES**
DISCRETE M_00005_00003 #
{6..47}
**CONSTRAINTS**
w-inintervalset(M_00005_00003, [6,6,8,8,11,13,24,24,26,26,39,39,47,47])
**VARIABLES**
DISCRETE M_00005_00004 #
{6..47}
**CONSTRAINTS**
w-inintervalset(M_00005_00004, [6,6,8,8,11,13,24,24,26,26,39,39,47,47])
**VARIABLES**
DISCRETE M_00005_00005 #
{6..47}
**CONSTRAINTS**
w-inintervalset(M_00005_00005, [6,6,8,8,11,13,24,24,26,26,39,39,47,47])
**VARIABLES**
DISCRETE M_00006_00001 #
{6..47}
**CONSTRAINTS**
w-inintervalset(M_00006_00001, [6,6,8,8,11,13,24,24,26,26,39,39,47,47])
**VARIABLES**
DISCRETE M_00006_00002 #
{6..47}
**CONSTRAINTS**
w-inintervalset(M_00006_00002, [6,6,8,8,11,13,24,24,26,26,39,39,47,47])
**VARIABLES**
DISCRETE M_00006_00003 #
{6..47}
**CONSTRAINTS**
w-inintervalset(M_00006_00003, [6,6,8,8,11,13,24,24,26,26,39,39,47,47])
**VARIABLES**
DISCRETE M_00006_00004 #
{6..47}
**CONSTRAINTS**
w-inintervalset(M_00006_00004, [6,6,8,8,11,13,24,24,26,26,39,39,47,47])
**VARIABLES**
DISCRETE M_00007_00001 #
{6..47}
**CONSTRAINTS**
w-inintervalset(M_00007_00001, [6,6,8,8,11,13,24,24,26,26,39,39,47,47])
**VARIABLES**
DISCRETE M_00007_00002 #
{6..47}
**CONSTRAINTS**
w-inintervalset(M_00007_00002, [6,6,8,8,11,13,24,24,26,26,39,39,47,47])
**VARIABLES**
DISCRETE M_00007_00003 #
{6..47}
**CONSTRAINTS**
w-inintervalset(M_00007_00003, [6,6,8,8,11,13,24,24,26,26,39,39,47,47])
**VARIABLES**
DISCRETE M_00008_00001 #
{6..47}
**CONSTRAINTS**
w-inintervalset(M_00008_00001, [6,6,8,8,11,13,24,24,26,26,39,39,47,47])
**VARIABLES**
DISCRETE M_00008_00002 #
{6..47}
**CONSTRAINTS**
w-inintervalset(M_00008_00002, [6,6,8,8,11,13,24,24,26,26,39,39,47,47])
**VARIABLES**
DISCRETE M_00009_00001 #
{6..47}
**CONSTRAINTS**
w-inintervalset(M_00009_00001, [6,6,8,8,11,13,24,24,26,26,39,39,47,47])
**VARIABLES**
DISCRETE aux13 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00006/13)
{0..3}
DISCRETE aux14 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00002_00007/13)
{1..3}
DISCRETE aux16 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00007_00002/13)
{0..3}
BOOL aux17 #Active-CSE: 7 occurrences of this expression or equivalent: (M_00004_00001=M_00005_00001)
BOOL aux18 #Active-CSE: 5 occurrences of this expression or equivalent: (M_00004_00003=M_00005_00003)
BOOL aux19 #Active-CSE: 5 occurrences of this expression or equivalent: (M_00004_00005=M_00005_00004)
BOOL aux20 #Active-CSE: 7 occurrences of this expression or equivalent: (M_00002_00002=M_00003_00002)
BOOL aux21 #Active-CSE: 7 occurrences of this expression or equivalent: (M_00004_00006=M_00005_00005)
DISCRETE aux22 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00003/13)
{1..3}
BOOL aux23 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00002/13)
DISCRETE aux24 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00004/13)
{0..3}
DISCRETE aux25 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00005/13)
{0..3}
BOOL aux26 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00008/13)
BOOL aux27 #Active-CSE: 5 occurrences of this expression or equivalent: (M_00003_00006=M_00004_00005)
BOOL aux28 #Active-CSE: 5 occurrences of this expression or equivalent: (M_00003_00004=M_00004_00004)
BOOL aux29 #Active-CSE: 7 occurrences of this expression or equivalent: (M_00003_00003=M_00004_00003)
BOOL aux30 #Active-CSE: 4 occurrences of this expression or equivalent: (M_00005_00002=M_00006_00002)
BOOL aux31 #Active-CSE: 4 occurrences of this expression or equivalent: (M_00005_00003=M_00006_00003)
DISCRETE aux32 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00007/13)
{0..3}
DISCRETE aux34 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00005_00005/13)
{0..3}
DISCRETE aux35 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00005_00001/13)
{0..3}
DISCRETE aux36 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00005_00003/13)
{0..3}
BOOL aux37 #Active-CSE: 7 occurrences of this expression or equivalent: (M_00003_00007=M_00004_00006)
BOOL aux38 #Active-CSE: 5 occurrences of this expression or equivalent: (M_00002_00005=M_00003_00005)
BOOL aux39 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00004_00004=M_00005_00003)
BOOL aux40 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00007=M_00003_00007)
BOOL aux41 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00002_00006=M_00003_00005)
BOOL aux42 #Active-CSE: 6 occurrences of this expression or equivalent: (M_00004_00002=M_00005_00002)
BOOL aux43 #Active-CSE: 4 occurrences of this expression or equivalent: (M_00002_00007=M_00003_00006)
BOOL aux44 #Active-CSE: 4 occurrences of this expression or equivalent: (M_00002_00006=M_00003_00006)
BOOL aux45 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00007_00003=M_00008_00002)
BOOL aux46 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00007_00001=M_00008_00001)
BOOL aux47 #Active-CSE: 5 occurrences of this expression or equivalent: (M_00005_00001=M_00006_00001)
DISCRETE aux48 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00006_00001/13)
{0..3}
DISCRETE aux49 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00006_00002/13)
{0..3}
DISCRETE aux50 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00006_00003/13)
{0..3}
DISCRETE aux51 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00006_00004/13)
{0..3}
DISCRETE aux52 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00006/13)
{0..3}
DISCRETE aux53 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00005/13)
{0..3}
BOOL aux54 #Active-CSE: 5 occurrences of this expression or equivalent: (M_00005_00005=M_00006_00004)
BOOL aux55 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00003_00006=M_00004_00006)
BOOL aux56 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00005_00004=M_00006_00004)
BOOL aux57 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00005_00003=M_00006_00002)
DISCRETE aux58 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00005_00002/13)
{0..3}
DISCRETE aux59 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00005_00004/13)
{0..3}
BOOL aux60 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00003=M_00005_00002)
BOOL aux61 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00005=M_00005_00005)
BOOL aux62 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00003_00005=M_00004_00004)
BOOL aux63 #Active-CSE: 8 occurrences of this expression or equivalent: (M_00003_00002=M_00004_00002)
BOOL aux64 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00005_00004=M_00006_00003)
BOOL aux65 #Active-CSE: 4 occurrences of this expression or equivalent: (M_00003_00005=M_00004_00005)
BOOL aux66 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00007_00003=M_00006_00004)
BOOL aux67 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00007_00001=M_00006_00001)
BOOL aux68 #Active-CSE: 3 occurrences of this expression or equivalent: (M_00007_00002=M_00006_00002)
BOOL aux69 #Active-CSE: 6 occurrences of this expression or equivalent: (M_00002_00008=M_00003_00007)
BOOL aux70 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00007_00003=M_00006_00003)
BOOL aux71 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00007_00002=M_00006_00003)
DISCRETE aux72 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00001/13)
{1..2}
DISCRETE aux73 #Active-CSE: 2 occurrences of this expression or equivalent: (M_00004_00006/13)
{0..3}
BOOL aux74 #Active-CSE: 4 occurrences of this expression or equivalent: (M_00004_00004=M_00005_00004)
DISCRETE aux75 #
{0..3}
DISCRETE aux76 #( - M_00002_00005 + M_00002_00006)
{-4..41}
**CONSTRAINTS**
w-inintervalset(aux76, [-4,-3,-1,7,12,16,18,18,20,20,27,28,31,31,33,33,35,36,39,39,41,41])
**VARIABLES**
DISCRETE aux77 #( - M_00002_00006 + M_00002_00007)
{-34..39}
**CONSTRAINTS**
w-inintervalset(aux77, [-34,-34,-26,-26,-23,-23,-21,-21,-15,-15,-13,-13,-11,-11,-8,-8,-2,-2,0,2,5,5,8,8,11,16,18,18,21,21,23,23,26,28,31,31,34,36,39,39])
**VARIABLES**
DISCRETE aux78 #( - M_00002_00005 + M_00002_00008)
{1..2}
DISCRETE aux79 #( - M_00002_00007 + M_00002_00008)
{-34..-5}
**CONSTRAINTS**
w-inintervalset(aux79, [-34,-34,-31,-31,-28,-26,-18,-18,-16,-11,-5,-5])
**VARIABLES**
DISCRETE aux80 #( - M_00002_00002 + M_00002_00005)
{-6..1}
**CONSTRAINTS**
w-inintervalset(aux80, [-6,-3,-1,1])
**VARIABLES**
DISCRETE aux81 #(M_00002_00007 + -24)
{-11..23}
**CONSTRAINTS**
w-inintervalset(aux81, [-11,-11,0,0,2,2,15,15,23,23])
**VARIABLES**
DISCRETE aux82 #( - M_00002_00008 + -1)
{-14..-9}
**CONSTRAINTS**
w-inintervalset(aux82, [-14,-12,-9,-9])
**VARIABLES**
DISCRETE aux83 #(M_00002_00006 + -39)
{-31..8}
**CONSTRAINTS**
w-inintervalset(aux83, [-31,-31,-28,-26,-15,-15,-13,-13,0,0,8,8])
**VARIABLES**
DISCRETE aux84 #( - M_00003_00003 + M_00003_00004)
{-26..-15}
**CONSTRAINTS**
w-inintervalset(aux84, [-26,-26,-23,-23,-15,-15])
**VARIABLES**
DISCRETE aux85 #( - M_00003_00002 + M_00003_00005)
{-6..41}
**CONSTRAINTS**
w-inintervalset(aux85, [-6,7,12,16,18,18,20,20,27,28,31,31,33,33,35,36,39,39,41,41])
**VARIABLES**
DISCRETE aux86 #( - M_00003_00004 + M_00003_00005)
{-18..23}
**CONSTRAINTS**
w-inintervalset(aux86, [-18,-18,-16,-16,-13,-11,-7,-7,-5,-5,-2,0,2,2,11,11,13,13,15,15,23,23])
**VARIABLES**
DISCRETE aux87 #( - M_00003_00005 + M_00003_00006)
{-34..41}
**CONSTRAINTS**
w-inintervalset(aux87, [-34,-34,-31,-31,-28,-26,-23,-23,-21,-21,-18,-18,-16,-11,-8,-8,-5,8,11,16,18,18,20,21,23,23,26,28,31,31,33,36,39,39,41,41])
**VARIABLES**
DISCRETE aux88 #( - M_00003_00004 + M_00003_00007)
{-16..23}
**CONSTRAINTS**
w-inintervalset(aux88, [-16,-16,-13,-11,-5,-5,-2,0,2,2,11,11,13,13,15,15,23,23])
**VARIABLES**
DISCRETE aux89 #( - M_00003_00006 + M_00003_00007)
{-39..39}
**CONSTRAINTS**
w-inintervalset(aux89, [-39,-39,-36,-34,-31,-31,-28,-26,-23,-23,-21,-21,-18,-18,-16,-11,-8,-8,-5,5,8,8,11,16,18,18,21,21,23,23,26,28,31,31,34,36,39,39])
**VARIABLES**
DISCRETE aux90 #( - M_00003_00003 + M_00003_00006)
{-34..8}
**CONSTRAINTS**
w-inintervalset(aux90, [-34,-34,-31,-31,-28,-26,-23,-23,-21,-21,-15,-15,-13,-13,-8,-8,0,0,8,8])
**VARIABLES**
DISCRETE aux91 #( - M_00003_00007 + -1)
{-48..-9}
**CONSTRAINTS**
w-inintervalset(aux91, [-48,-48,-40,-40,-27,-27,-25,-25,-14,-12,-9,-9])
**VARIABLES**
DISCRETE aux92 #(M_00003_00004 + -26)
{-13..-2}
**CONSTRAINTS**
w-inintervalset(aux92, [-13,-13,-2,-2])
**VARIABLES**
DISCRETE aux93 #( - M_00004_00001 + M_00004_00002)
{-20..-1}
**CONSTRAINTS**
w-inintervalset(aux93, [-20,-20,-18,-18,-16,-11,-7,-7,-5,-5,-2,-1])
**VARIABLES**
DISCRETE aux94 #( - M_00004_00001 + M_00004_00004)
{-20..21}
**CONSTRAINTS**
w-inintervalset(aux94, [-20,-20,-18,-18,-16,-11,-7,-7,-5,-5,-2,0,2,2,11,11,13,13,15,15,21,21])
**VARIABLES**
DISCRETE aux95 #( - M_00004_00006 + -1)
{-48..-9}
**CONSTRAINTS**
w-inintervalset(aux95, [-48,-48,-40,-40,-27,-27,-25,-25,-14,-12,-9,-9])
**VARIABLES**
DISCRETE aux96 #( - M_00004_00004 + M_00004_00005)
{-39..41}
**CONSTRAINTS**
w-inintervalset(aux96, [-39,-39,-36,-33,-31,-31,-28,-26,-23,-23,-21,-20,-18,-18,-16,-11,-8,8,11,16,18,18,20,21,23,23,26,28,31,31,33,36,39,39,41,41])
**VARIABLES**
DISCRETE aux97 #( - M_00004_00005 + M_00004_00006)
{-39..41}
**CONSTRAINTS**
w-inintervalset(aux97, [-39,-39,-36,-34,-31,-31,-28,-26,-23,-23,-21,-21,-18,-18,-16,-11,-8,-8,-5,8,11,16,18,18,20,21,23,23,26,28,31,31,33,36,39,39,41,41])
**VARIABLES**
DISCRETE aux98 #( - M_00004_00003 + M_00004_00004)
{-41..11}
**CONSTRAINTS**
w-inintervalset(aux98, [-41,-41,-39,-39,-36,-33,-31,-31,-28,-26,-23,-23,-21,-20,-18,-18,-16,-11,-8,-7,-5,-5,-2,0,2,2,8,8,11,11])
**VARIABLES**
DISCRETE aux99 #( - M_00004_00003 + M_00004_00006)
{-39..34}
**CONSTRAINTS**
w-inintervalset(aux99, [-39,-39,-36,-34,-31,-31,-28,-26,-23,-23,-21,-21,-18,-18,-16,-11,-8,-8,-5,-5,-2,0,2,2,8,8,11,11,13,13,15,15,21,21,23,23,26,26,34,34])
**VARIABLES**
DISCRETE aux100 #( - M_00004_00002 + M_00004_00003)
{1..41}
**CONSTRAINTS**
w-inintervalset(aux100, [1,2,5,5,7,7,11,16,18,18,20,20,23,23,26,28,31,31,33,36,39,39,41,41])
**VARIABLES**
DISCRETE aux101 #( - M_00004_00002 + M_00004_00005)
{-11..41}
**CONSTRAINTS**
w-inintervalset(aux101, [-11,-11,-7,7,11,16,18,18,20,20,23,23,26,28,31,31,33,36,39,39,41,41])
**VARIABLES**
DISCRETE aux102 #(-1 - M_00005_00005)
{-48..-7}
**CONSTRAINTS**
w-inintervalset(aux102, [-48,-48,-40,-40,-27,-27,-25,-25,-14,-12,-9,-9,-7,-7])
**VARIABLES**
DISCRETE aux103 #( - M_00005_00002 + M_00005_00003)
{-41..41}
**CONSTRAINTS**
w-inintervalset(aux103, [-41,-41,-39,-39,-36,-33,-31,-31,-28,-26,-23,-23,-21,-20,-18,-18,-16,-11,-8,8,11,16,18,18,20,21,23,23,26,28,31,31,33,36,39,39,41,41])
**VARIABLES**
DISCRETE aux104 #( - M_00005_00003 + M_00005_00004)
{-41..41}
**CONSTRAINTS**
w-inintervalset(aux104, [-41,-41,-39,-39,-36,-33,-31,-31,-28,-26,-23,-23,-21,-20,-18,-18,-16,-11,-8,8,11,16,18,18,20,21,23,23,26,28,31,31,33,36,39,39,41,41])
**VARIABLES**
DISCRETE aux105 #( - M_00005_00002 + M_00005_00005)
{-39..41}
**CONSTRAINTS**
w-inintervalset(aux105, [-39,-39,-36,-33,-31,-31,-28,-26,-23,-23,-21,-20,-18,-18,-16,-11,-8,8,11,16,18,18,20,21,23,23,26,28,31,31,33,36,39,39,41,41])
**VARIABLES**
DISCRETE aux106 #( - M_00005_00004 + M_00005_00005)
{-41..41}
**CONSTRAINTS**
w-inintervalset(aux106, [-41,-41,-39,-39,-36,-33,-31,-31,-28,-26,-23,-23,-21,-20,-18,-18,-16,-11,-8,8,11,16,18,18,20,21,23,23,26,28,31,31,33,36,39,39,41,41])
**VARIABLES**
DISCRETE aux107 #( - M_00005_00001 + M_00005_00002)
{-33..34}
**CONSTRAINTS**
w-inintervalset(aux107, [-33,-33,-31,-31,-28,-26,-20,-20,-18,-18,-16,-11,-7,8,11,16,18,18,20,21,23,23,26,28,31,31,33,34])
**VARIABLES**
DISCRETE aux108 #( - M_00005_00001 + M_00005_00004)
{-31..41}
**CONSTRAINTS**
w-inintervalset(aux108, [-31,-31,-28,-26,-20,-20,-18,-18,-16,-11,-7,8,11,16,18,18,20,21,23,23,26,28,31,31,33,36,39,39,41,41])
**VARIABLES**
DISCRETE aux109 #( - M_00006_00001 + M_00006_00002)
{-41..41}
**CONSTRAINTS**
w-inintervalset(aux109, [-41,-41,-39,-39,-36,-33,-31,-31,-28,-26,-23,-23,-21,-20,-18,-18,-16,-11,-8,8,11,16,18,18,20,21,23,23,26,28,31,31,33,36,39,39,41,41])
**VARIABLES**
DISCRETE aux110 #( - M_00006_00002 + M_00006_00003)
{-41..41}
**CONSTRAINTS**
w-inintervalset(aux110, [-41,-41,-39,-39,-36,-33,-31,-31,-28,-26,-23,-23,-21,-20,-18,-18,-16,-11,-8,8,11,16,18,18,20,21,23,23,26,28,31,31,33,36,39,39,41,41])
**VARIABLES**
DISCRETE aux111 #( - M_00006_00001 + M_00006_00004)
{-41..41}
**CONSTRAINTS**
w-inintervalset(aux111, [-41,-41,-39,-39,-36,-33,-31,-31,-28,-26,-23,-23,-21,-20,-18,-18,-16,-11,-8,8,11,16,18,18,20,21,23,23,26,28,31,31,33,36,39,39,41,41])
**VARIABLES**
DISCRETE aux112 #( - M_00006_00003 + M_00006_00004)
{-41..41}
**CONSTRAINTS**
w-inintervalset(aux112, [-41,-41,-39,-39,-36,-33,-31,-31,-28,-26,-23,-23,-21,-20,-18,-18,-16,-11,-8,8,11,16,18,18,20,21,23,23,26,28,31,31,33,36,39,39,41,41])
**VARIABLES**
DISCRETE aux113 #(-1 - M_00006_00004)
{-48..-7}
**CONSTRAINTS**
w-inintervalset(aux113, [-48,-48,-40,-40,-27,-27,-25,-25,-14,-12,-9,-9,-7,-7])
**VARIABLES**
DISCRETE aux114 #( - M_00007_00002 + M_00007_00003)
{-39..39}
**CONSTRAINTS**
w-inintervalset(aux114, [-39,-39,-36,-33,-31,-31,-28,-26,-23,-23,-21,-20,-18,-18,-16,-11,-8,8,11,16,18,18,20,21,23,23,26,28,31,31,33,36,39,39])
**VARIABLES**
DISCRETE aux115 #( - M_00007_00001 + M_00007_00002)
{-41..41}
**CONSTRAINTS**
w-inintervalset(aux115, [-41,-41,-39,-39,-36,-33,-31,-31,-28,-26,-23,-23,-21,-20,-18,-18,-16,-11,-8,8,11,16,18,18,20,21,23,23,26,28,31,31,33,36,39,39,41,41])
**VARIABLES**
DISCRETE aux116 #( - M_00007_00003 + -1)
{-48..-7}
**CONSTRAINTS**
w-inintervalset(aux116, [-48,-48,-40,-40,-27,-27,-25,-25,-14,-12,-9,-9,-7,-7])
**VARIABLES**
DISCRETE aux117 #( - M_00008_00001 + M_00008_00002)
{-39..39}
**CONSTRAINTS**
w-inintervalset(aux117, [-39,-39,-36,-33,-31,-31,-28,-26,-23,-23,-21,-20,-18,-18,-16,-11,-8,8,11,16,18,18,20,21,23,23,26,28,31,31,33,36,39,39])
**VARIABLES**
DISCRETE aux118 #( - M_00008_00002 + -1)
{-48..-7}
**CONSTRAINTS**
w-inintervalset(aux118, [-48,-48,-40,-40,-27,-27,-25,-25,-14,-12,-9,-9,-7,-7])
**VARIABLES**
**VARIABLES**
ALIAS cards[9]=[26, 11, 39, 24, 12, 6, 47, 13, 8]
**SEARCH**
PRINT[[M_00002_00002],[M_00002_00005],[M_00002_00006],[M_00002_00007],[M_00002_00008],[M_00003_00002],[M_00003_00003],[M_00003_00004],[M_00003_00005],[M_00003_00006],[M_00003_00007],[M_00004_00001],[M_00004_00002],[M_00004_00003],[M_00004_00004],[M_00004_00005],[M_00004_00006],[M_00005_00001],[M_00005_00002],[M_00005_00003],[M_00005_00004],[M_00005_00005],[M_00006_00001],[M_00006_00002],[M_00006_00003],[M_00006_00004],[M_00007_00001],[M_00007_00002],[M_00007_00003],[M_00008_00001],[M_00008_00002],[M_00009_00001]]
VARORDER STATIC [M_00002_00002, M_00002_00005, M_00002_00006, M_00002_00007, M_00002_00008, M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005, M_00003_00006, M_00003_00007, M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, M_00004_00006, M_00005_00001, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005, M_00006_00001, M_00006_00002, M_00006_00003, M_00006_00004, M_00007_00001, M_00007_00002, M_00007_00003, M_00008_00001, M_00008_00002, M_00009_00001]
**CONSTRAINTS**
div(M_00008_00002, 13, aux75)
div(M_00002_00006, 13, aux13)
div(M_00002_00007, 13, aux14)
div(M_00002_00005, 13, 0)
div(M_00007_00002, 13, aux16)
reify(gaceq(M_00004_00001,M_00005_00001), aux17)
reify(gaceq(M_00004_00003,M_00005_00003), aux18)
reify(gaceq(M_00004_00005,M_00005_00004), aux19)
reify(gaceq(M_00002_00002,M_00003_00002), aux20)
reify(gaceq(M_00004_00006,M_00005_00005), aux21)
div(M_00004_00003, 13, aux22)
div(M_00004_00002, 13, aux23)
div(M_00004_00004, 13, aux24)
div(M_00004_00005, 13, aux25)
div(M_00002_00008, 13, aux26)
reify(gaceq(M_00003_00006,M_00004_00005), aux27)
reify(gaceq(M_00003_00004,M_00004_00004), aux28)
reify(gaceq(M_00003_00003,M_00004_00003), aux29)
reify(gaceq(M_00005_00002,M_00006_00002), aux30)
reify(gaceq(M_00005_00003,M_00006_00003), aux31)
div(M_00003_00007, 13, aux32)
div(M_00003_00004, 13, 1)
div(M_00005_00005, 13, aux34)
div(M_00005_00001, 13, aux35)
div(M_00005_00003, 13, aux36)
reify(gaceq(M_00003_00007,M_00004_00006), aux37)
reify(gaceq(M_00002_00005,M_00003_00005), aux38)
reify(gaceq(M_00004_00004,M_00005_00003), aux39)
reify(gaceq(M_00002_00007,M_00003_00007), aux40)
reify(gaceq(M_00002_00006,M_00003_00005), aux41)
reify(gaceq(M_00004_00002,M_00005_00002), aux42)
reify(gaceq(M_00002_00007,M_00003_00006), aux43)
reify(gaceq(M_00002_00006,M_00003_00006), aux44)
reify(gaceq(M_00007_00003,M_00008_00002), aux45)
reify(gaceq(M_00007_00001,M_00008_00001), aux46)
reify(gaceq(M_00005_00001,M_00006_00001), aux47)
div(M_00006_00001, 13, aux48)
div(M_00006_00002, 13, aux49)
div(M_00006_00003, 13, aux50)
div(M_00006_00004, 13, aux51)
div(M_00003_00006, 13, aux52)
div(M_00003_00005, 13, aux53)
reify(gaceq(M_00005_00005,M_00006_00004), aux54)
reify(gaceq(M_00003_00006,M_00004_00006), aux55)
reify(gaceq(M_00005_00004,M_00006_00004), aux56)
reify(gaceq(M_00005_00003,M_00006_00002), aux57)
div(M_00005_00002, 13, aux58)
div(M_00005_00004, 13, aux59)
reify(gaceq(M_00004_00003,M_00005_00002), aux60)
reify(gaceq(M_00004_00005,M_00005_00005), aux61)
reify(gaceq(M_00003_00005,M_00004_00004), aux62)
reify(gaceq(M_00003_00002,M_00004_00002), aux63)
reify(gaceq(M_00005_00004,M_00006_00003), aux64)
reify(gaceq(M_00003_00005,M_00004_00005), aux65)
reify(gaceq(M_00007_00003,M_00006_00004), aux66)
reify(gaceq(M_00007_00001,M_00006_00001), aux67)
reify(gaceq(M_00007_00002,M_00006_00002), aux68)
reify(gaceq(M_00002_00008,M_00003_00007), aux69)
reify(gaceq(M_00007_00003,M_00006_00003), aux70)
reify(gaceq(M_00007_00002,M_00006_00003), aux71)
div(M_00004_00001, 13, aux72)
div(M_00004_00006, 13, aux73)
reify(gaceq(M_00004_00004,M_00005_00004), aux74)
gccweak([M_00002_00002, M_00002_00005, M_00002_00006, M_00002_00007, M_00002_00008],[-1],[0])
gccweak([M_00003_00002, M_00003_00003, M_00003_00004, M_00003_00005, M_00003_00006, M_00003_00007],[-1],[0])
gccweak([M_00004_00001, M_00004_00002, M_00004_00003, M_00004_00004, M_00004_00005, M_00004_00006],[-1],[0])
gccweak([M_00005_00001, M_00005_00002, M_00005_00003, M_00005_00004, M_00005_00005],[-1],[0])
gccweak([M_00006_00001, M_00006_00002, M_00006_00003, M_00006_00004],[-1],[0])
gccweak([M_00007_00001, M_00007_00002, M_00007_00003],[-1],[0])
gccweak([M_00008_00001, M_00008_00002],[-1],[0])
gccweak([M_00009_00001],[-1],[0])
watched-or({watched-and({w-literal(M_00002_00002,11),w-literal(M_00002_00005,6),w-literal(M_00002_00007,13),w-literal(M_00002_00006,47),w-literal(M_00002_00008,8)}),watched-and({w-literal(M_00002_00002,11),w-literal(M_00002_00005,12),w-literal(M_00002_00006,8),w-literal(M_00002_00008,13),w-literal(M_00002_00007,47)}),watched-and({w-literal(M_00002_00002,12),w-literal(M_00002_00005,6),w-literal(M_00002_00007,13),w-literal(M_00002_00006,47),w-literal(M_00002_00008,8)})})
watched-or({watched-and({w-literal(M_00003_00003,39),w-literal(M_00003_00004,24),w-literal(aux20,1),w-literal(aux41,1),w-literal(aux43,1),w-literal(aux69,1),watched-or({modulo(aux76,13,0),w-literal(aux13,0)})}),watched-and({w-literal(M_00003_00003,39),w-literal(M_00003_00004,24),w-literal(aux20,1),w-literal(aux38,1),w-literal(aux43,1),w-literal(aux69,1),watched-or({modulo(aux77,13,0),gaceq(aux13,aux14)})}),watched-and({w-literal(M_00003_00003,39),w-literal(M_00003_00004,24),w-literal(aux20,1),w-literal(aux44,1),w-literal(aux40,1),gaceq(M_00002_00008,M_00003_00005),watched-or({modulo(aux78,13,0),w-literal(aux26,0)})}),watched-and({w-literal(M_00003_00003,39),w-literal(M_00003_00004,24),w-literal(aux20,1),w-literal(aux38,1),w-literal(aux44,1),w-literal(aux69,1),watched-or({modulo(aux79,13,0),gaceq(aux14,aux26)})}),watched-and({w-literal(M_00003_00003,39),w-literal(M_00003_00004,24),gaceq(M_00002_00005,M_00003_00002),w-literal(aux41,1),w-literal(aux43,1),w-literal(aux69,1),watched-or({modulo(aux80,13,0),div(M_00002_00002, 13, 0)})}),watched-and({w-literal(M_00003_00003,39),watched-or({w-literal(aux14,1),modulo(aux81,13,0)}),w-literal(aux20,1),w-literal(aux38,1),w-literal(aux44,1),gaceq(M_00002_00007,M_00003_00004),w-literal(aux69,1)}),watched-and({w-literal(M_00003_00003,39),w-literal(M_00003_00004,24),modulo(aux82,13,0),w-literal(aux20,1),w-literal(aux38,1),w-literal(aux44,1),w-literal(aux40,1)}),watched-and({w-literal(M_00003_00004,24),watched-or({w-literal(aux13,3),modulo(aux83,13,0)}),w-literal(aux20,1),w-literal(aux38,1),gaceq(M_00002_00006,M_00003_00003),w-literal(aux43,1),w-literal(aux69,1)})})
watched-or({watched-and({w-literal(aux63,1),gaceq(M_00003_00004,M_00004_00003),w-literal(aux62,1),w-literal(aux27,1),w-literal(aux37,1),modulo(aux84,13,0),w-literal(M_00004_00001,26)}),watched-and({w-literal(aux29,1),w-literal(aux28,1),gaceq(M_00003_00005,M_00004_00002),w-literal(aux27,1),w-literal(aux37,1),watched-or({modulo(aux85,13,0),div(M_00003_00002, 13, aux53)}),w-literal(M_00004_00001,26)}),watched-and({w-literal(aux63,1),w-literal(aux29,1),w-literal(aux62,1),w-literal(aux27,1),w-literal(aux37,1),watched-or({modulo(aux86,13,0),w-literal(aux53,1)}),w-literal(M_00004_00001,26)}),watched-and({w-literal(aux63,1),w-literal(aux29,1),w-literal(aux28,1),w-literal(aux27,1),w-literal(aux37,1),watched-or({modulo(aux87,13,0),gaceq(aux53,aux52)}),w-literal(M_00004_00001,26)}),watched-and({w-literal(aux63,1),w-literal(aux29,1),w-literal(aux65,1),w-literal(aux55,1),gaceq(M_00003_00007,M_00004_00004),watched-or({modulo(aux88,13,0),w-literal(aux32,1)}),w-literal(M_00004_00001,26)}),watched-and({w-literal(aux63,1),w-literal(aux29,1),w-literal(aux28,1),w-literal(aux65,1),w-literal(aux37,1),watched-or({modulo(aux89,13,0),gaceq(aux52,aux32)}),w-literal(M_00004_00001,26)}),watched-and({w-literal(aux63,1),w-literal(aux28,1),w-literal(aux65,1),gaceq(M_00003_00006,M_00004_00003),w-literal(aux37,1),watched-or({modulo(aux90,13,0),div(M_00003_00003, 13, aux52)}),w-literal(M_00004_00001,26)}),watched-and({w-literal(aux63,1),w-literal(aux29,1),w-literal(aux28,1),w-literal(aux65,1),w-literal(aux55,1),modulo(aux91,13,0),w-literal(M_00004_00001,26)}),watched-and({w-literal(aux63,1),w-literal(aux29,1),gaceq(M_00003_00004,M_00004_00001),w-literal(aux62,1),w-literal(aux27,1),w-literal(aux37,1),modulo(aux92,13,0)})})
watched-or({watched-and({gaceq(M_00004_00002,M_00005_00001),w-literal(aux60,1),w-literal(aux39,1),w-literal(aux19,1),w-literal(aux21,1),watched-or({gaceq(aux72,aux23),modulo(aux93,13,0)})}),watched-and({w-literal(aux42,1),w-literal(aux18,1),gaceq(M_00004_00004,M_00005_00001),w-literal(aux19,1),w-literal(aux21,1),watched-or({gaceq(aux72,aux24),modulo(aux94,13,0)})}),watched-and({modulo(aux95,13,0),w-literal(aux17,1),w-literal(aux42,1),w-literal(aux18,1),w-literal(aux74,1),w-literal(aux61,1)}),watched-and({w-literal(aux17,1),w-literal(aux42,1),w-literal(aux18,1),w-literal(aux19,1),w-literal(aux21,1),watched-or({gaceq(aux24,aux25),modulo(aux96,13,0)})}),watched-and({w-literal(aux17,1),w-literal(aux42,1),w-literal(aux18,1),w-literal(aux74,1),w-literal(aux21,1),watched-or({gaceq(aux25,aux73),modulo(aux97,13,0)})}),watched-and({w-literal(aux17,1),w-literal(aux42,1),w-literal(aux39,1),w-literal(aux19,1),w-literal(aux21,1),watched-or({gaceq(aux22,aux24),modulo(aux98,13,0)})}),watched-and({w-literal(aux17,1),w-literal(aux42,1),w-literal(aux74,1),w-literal(aux61,1),gaceq(M_00004_00006,M_00005_00003),watched-or({gaceq(aux22,aux73),modulo(aux99,13,0)})}),watched-and({w-literal(aux17,1),w-literal(aux60,1),w-literal(aux39,1),w-literal(aux19,1),w-literal(aux21,1),watched-or({gaceq(aux23,aux22),modulo(aux100,13,0)})}),watched-and({w-literal(aux17,1),w-literal(aux18,1),w-literal(aux74,1),gaceq(M_00004_00005,M_00005_00002),w-literal(aux21,1),watched-or({gaceq(aux23,aux25),modulo(aux101,13,0)})})})
watched-or({watched-and({w-literal(aux47,1),w-literal(aux30,1),w-literal(aux31,1),w-literal(aux56,1),modulo(aux102,13,0)}),watched-and({w-literal(aux47,1),w-literal(aux57,1),w-literal(aux64,1),w-literal(aux54,1),watched-or({modulo(aux103,13,0),gaceq(aux58,aux36)})}),watched-and({w-literal(aux47,1),w-literal(aux30,1),w-literal(aux64,1),w-literal(aux54,1),watched-or({modulo(aux104,13,0),gaceq(aux36,aux59)})}),watched-and({w-literal(aux47,1),w-literal(aux31,1),w-literal(aux56,1),gaceq(M_00005_00005,M_00006_00002),watched-or({modulo(aux105,13,0),gaceq(aux58,aux34)})}),watched-and({w-literal(aux47,1),w-literal(aux30,1),w-literal(aux31,1),w-literal(aux54,1),watched-or({modulo(aux106,13,0),gaceq(aux59,aux34)})}),watched-and({gaceq(M_00005_00002,M_00006_00001),w-literal(aux57,1),w-literal(aux64,1),w-literal(aux54,1),watched-or({modulo(aux107,13,0),gaceq(aux35,aux58)})}),watched-and({w-literal(aux30,1),w-literal(aux31,1),gaceq(M_00005_00004,M_00006_00001),w-literal(aux54,1),watched-or({modulo(aux108,13,0),gaceq(aux35,aux59)})})})
watched-or({watched-and({gaceq(M_00007_00001,M_00006_00002),w-literal(aux71,1),w-literal(aux66,1),watched-or({gaceq(aux48,aux49),modulo(aux109,13,0)})}),watched-and({w-literal(aux67,1),w-literal(aux71,1),w-literal(aux66,1),watched-or({gaceq(aux49,aux50),modulo(aux110,13,0)})}),watched-and({gaceq(M_00007_00001,M_00006_00004),w-literal(aux68,1),w-literal(aux70,1),watched-or({gaceq(aux48,aux51),modulo(aux111,13,0)})}),watched-and({w-literal(aux67,1),w-literal(aux68,1),w-literal(aux66,1),watched-or({gaceq(aux50,aux51),modulo(aux112,13,0)})}),watched-and({w-literal(aux67,1),w-literal(aux68,1),w-literal(aux70,1),modulo(aux113,13,0)})})
watched-or({watched-and({watched-or({modulo(aux114,13,0),div(M_00007_00003, 13, aux16)}),w-literal(aux46,1),w-literal(aux45,1)}),watched-and({watched-or({modulo(aux115,13,0),div(M_00007_00001, 13, aux16)}),gaceq(M_00007_00002,M_00008_00001),w-literal(aux45,1)}),watched-and({modulo(aux116,13,0),w-literal(aux46,1),gaceq(M_00007_00002,M_00008_00002)})})
watched-or({watched-and({watched-or({div(M_00008_00001, 13, aux75),modulo(aux117,13,0)}),gaceq(M_00008_00002,M_00009_00001)}),watched-and({gaceq(M_00008_00001,M_00009_00001),modulo(aux118,13,0)})})
weightedsumleq([-1,1],[M_00002_00005,M_00002_00006],aux76)
weightedsumgeq([-1,1],[M_00002_00005,M_00002_00006],aux76)
weightedsumleq([-1,1],[M_00002_00006,M_00002_00007],aux77)
weightedsumgeq([-1,1],[M_00002_00006,M_00002_00007],aux77)
weightedsumleq([-1,1],[M_00002_00005,M_00002_00008],aux78)
weightedsumgeq([-1,1],[M_00002_00005,M_00002_00008],aux78)
weightedsumleq([-1,1],[M_00002_00007,M_00002_00008],aux79)
weightedsumgeq([-1,1],[M_00002_00007,M_00002_00008],aux79)
weightedsumleq([-1,1],[M_00002_00002,M_00002_00005],aux80)
weightedsumgeq([-1,1],[M_00002_00002,M_00002_00005],aux80)
sumleq([M_00002_00007,-24],aux81)
sumgeq([M_00002_00007,-24],aux81)
weightedsumleq([-1,1],[M_00002_00008,-1],aux82)
weightedsumgeq([-1,1],[M_00002_00008,-1],aux82)
sumleq([M_00002_00006,-39],aux83)
sumgeq([M_00002_00006,-39],aux83)
weightedsumleq([-1,1],[M_00003_00003,M_00003_00004],aux84)
weightedsumgeq([-1,1],[M_00003_00003,M_00003_00004],aux84)
weightedsumleq([-1,1],[M_00003_00002,M_00003_00005],aux85)
weightedsumgeq([-1,1],[M_00003_00002,M_00003_00005],aux85)
weightedsumleq([-1,1],[M_00003_00004,M_00003_00005],aux86)
weightedsumgeq([-1,1],[M_00003_00004,M_00003_00005],aux86)
weightedsumleq([-1,1],[M_00003_00005,M_00003_00006],aux87)
weightedsumgeq([-1,1],[M_00003_00005,M_00003_00006],aux87)
weightedsumleq([-1,1],[M_00003_00004,M_00003_00007],aux88)
weightedsumgeq([-1,1],[M_00003_00004,M_00003_00007],aux88)
weightedsumleq([-1,1],[M_00003_00006,M_00003_00007],aux89)
weightedsumgeq([-1,1],[M_00003_00006,M_00003_00007],aux89)
weightedsumleq([-1,1],[M_00003_00003,M_00003_00006],aux90)
weightedsumgeq([-1,1],[M_00003_00003,M_00003_00006],aux90)
weightedsumleq([-1,1],[M_00003_00007,-1],aux91)
weightedsumgeq([-1,1],[M_00003_00007,-1],aux91)
sumleq([M_00003_00004,-26],aux92)
sumgeq([M_00003_00004,-26],aux92)
weightedsumleq([-1,1],[M_00004_00001,M_00004_00002],aux93)
weightedsumgeq([-1,1],[M_00004_00001,M_00004_00002],aux93)
weightedsumleq([-1,1],[M_00004_00001,M_00004_00004],aux94)
weightedsumgeq([-1,1],[M_00004_00001,M_00004_00004],aux94)
weightedsumleq([-1,1],[M_00004_00006,-1],aux95)
weightedsumgeq([-1,1],[M_00004_00006,-1],aux95)
weightedsumleq([-1,1],[M_00004_00004,M_00004_00005],aux96)
weightedsumgeq([-1,1],[M_00004_00004,M_00004_00005],aux96)
weightedsumleq([-1,1],[M_00004_00005,M_00004_00006],aux97)
weightedsumgeq([-1,1],[M_00004_00005,M_00004_00006],aux97)
weightedsumleq([-1,1],[M_00004_00003,M_00004_00004],aux98)
weightedsumgeq([-1,1],[M_00004_00003,M_00004_00004],aux98)
weightedsumleq([-1,1],[M_00004_00003,M_00004_00006],aux99)
weightedsumgeq([-1,1],[M_00004_00003,M_00004_00006],aux99)
weightedsumleq([-1,1],[M_00004_00002,M_00004_00003],aux100)
weightedsumgeq([-1,1],[M_00004_00002,M_00004_00003],aux100)
weightedsumleq([-1,1],[M_00004_00002,M_00004_00005],aux101)
weightedsumgeq([-1,1],[M_00004_00002,M_00004_00005],aux101)
weightedsumleq([1,-1],[-1,M_00005_00005],aux102)
weightedsumgeq([1,-1],[-1,M_00005_00005],aux102)
weightedsumleq([-1,1],[M_00005_00002,M_00005_00003],aux103)
weightedsumgeq([-1,1],[M_00005_00002,M_00005_00003],aux103)
weightedsumleq([-1,1],[M_00005_00003,M_00005_00004],aux104)
weightedsumgeq([-1,1],[M_00005_00003,M_00005_00004],aux104)
weightedsumleq([-1,1],[M_00005_00002,M_00005_00005],aux105)
weightedsumgeq([-1,1],[M_00005_00002,M_00005_00005],aux105)
weightedsumleq([-1,1],[M_00005_00004,M_00005_00005],aux106)
weightedsumgeq([-1,1],[M_00005_00004,M_00005_00005],aux106)
weightedsumleq([-1,1],[M_00005_00001,M_00005_00002],aux107)
weightedsumgeq([-1,1],[M_00005_00001,M_00005_00002],aux107)
weightedsumleq([-1,1],[M_00005_00001,M_00005_00004],aux108)
weightedsumgeq([-1,1],[M_00005_00001,M_00005_00004],aux108)
weightedsumleq([-1,1],[M_00006_00001,M_00006_00002],aux109)
weightedsumgeq([-1,1],[M_00006_00001,M_00006_00002],aux109)
weightedsumleq([-1,1],[M_00006_00002,M_00006_00003],aux110)
weightedsumgeq([-1,1],[M_00006_00002,M_00006_00003],aux110)
weightedsumleq([-1,1],[M_00006_00001,M_00006_00004],aux111)
weightedsumgeq([-1,1],[M_00006_00001,M_00006_00004],aux111)
weightedsumleq([-1,1],[M_00006_00003,M_00006_00004],aux112)
weightedsumgeq([-1,1],[M_00006_00003,M_00006_00004],aux112)
weightedsumleq([1,-1],[-1,M_00006_00004],aux113)
weightedsumgeq([1,-1],[-1,M_00006_00004],aux113)
weightedsumleq([-1,1],[M_00007_00002,M_00007_00003],aux114)
weightedsumgeq([-1,1],[M_00007_00002,M_00007_00003],aux114)
weightedsumleq([-1,1],[M_00007_00001,M_00007_00002],aux115)
weightedsumgeq([-1,1],[M_00007_00001,M_00007_00002],aux115)
weightedsumleq([-1,1],[M_00007_00003,-1],aux116)
weightedsumgeq([-1,1],[M_00007_00003,-1],aux116)
weightedsumleq([-1,1],[M_00008_00001,M_00008_00002],aux117)
weightedsumgeq([-1,1],[M_00008_00001,M_00008_00002],aux117)
weightedsumleq([-1,1],[M_00008_00002,-1],aux118)
weightedsumgeq([-1,1],[M_00008_00002,-1],aux118)
**EOF**
