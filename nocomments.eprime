language ESSENCE' 1.0

given cards : matrix indexed by [ int(1..n) ] of int(0..51)
where alldifferent(cards)

find M : matrix indexed by [int(1..n), int(1..n)] of int(-1,cards)

such that 

forAll col : int(1..n) .
    M[1,col] = cards[col],

forAll row : int(1..n) .
    gcc( M[row,..], [-1], [row-1] ) /\
    forAll col : int(1..n-1) .
        ( M[row,col] = -1 ) -> ( M[row,col+1] = -1 ),

forAll row : int(1..n-1) .
    exists source : int (1..n) .
        exists dest : int (source-1, source-3) .
            ( M[row+1,dest] = M[row,source] ) 
            /\   
            (
                ( M[row,source] - M[row,dest] ) % 13 = 0  
                \/
                ( M[row,source] / 13 ) = ( M[row,dest] / 13 ) 
            ) 
            /\
            (forAll before : int (1..source-1) .
                ( before != dest ) -> ( M[row+1,before] = M[row,before] ))
            /\ 
            (forAll after : int (source+1..n) .
                ( M[row+1,after-1] = M[row,after] ))