language ESSENCE' 1.0

given cards : matrix indexed by [ int(1..n) ] of int(0..51)
where alldifferent(cards)

$ 2D matrix that represents the state of the cards after each move
find M : matrix indexed by [int(1..n), int(1..n)] of int(-1,cards)

such that 

$ fills first row with cards
forAll col : int(1..n) .
    M[1,col] = cards[col],

forAll row : int(1..n) .
    $ ensures an additional -1 is added to each row 
    gcc( M[row,..], [-1], [row-1] ) /\
    $ shifts all -1's to the end of the row
    forAll col : int(1..n-1) .
        ( M[row,col] = -1 ) -> ( M[row,col+1] = -1 ),

$ for every row, there exists a source column with a valid move destination,
$ either 1 or three indexes to the left of the source
forAll row : int(1..n-1) .
    exists source : int (1..n-1) .
        exists dest : int (source-1, source-3) .
            $ checks for source card in the destination index
            ( M[row+1,dest] != -1 ) /\ ( M[row+1,dest] = M[row,source] ) 
            /\   
            (   $ checks if same card in different suit
                ( M[row,source] - M[row,dest] ) % 13 = 0  
                \/
                $ checks if cards in same suit 
                ( M[row,source] / 13 ) = ( M[row,dest] / 13) 
            ) 
            /\
            $ checks all numbers before the source index remain in same position,
            $ excluding the destination index
            (forAll before : int (1..source-1) .
                ( before != dest ) -> ( M[row+1,before] = M[row,before] ))
            /\ 
            $ checks that all cards after the source index have been shifted to the left by one,
            $ excluding -1's
            (forAll after : int (source..n-1) .
                ( M[row+1,after] != -1 ) -> ( M[row+1,after] = M[row,after+1] ))